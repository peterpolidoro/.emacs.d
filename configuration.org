#+TITLE: Emacs Configuration
#+AUTHOR: Peter Polidoro
#+EMAIL: peterpolidoro@gmail.com
#+OPTIONS: toc:nil num:nil

* Use sensible-defaults.el

[[https://github.com/hrs/sensible-defaults.el.git][sensible-defaults.el]]

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/sensible-defaults.el")
  (sensible-defaults/increase-gc-threshold)
  (sensible-defaults/delete-trailing-whitespace)
  (sensible-defaults/treat-camelcase-as-separate-words)
  (sensible-defaults/automatically-follow-symlinks)
  (sensible-defaults/make-scripts-executable)
  (sensible-defaults/single-space-after-periods)
  (sensible-defaults/offer-to-create-parent-directories-on-save)
  (sensible-defaults/apply-changes-to-highlighted-region)
  (sensible-defaults/overwrite-selected-text)
  (sensible-defaults/ensure-that-files-end-with-newline)
  (sensible-defaults/quiet-startup)
  (sensible-defaults/make-dired-file-sizes-human-readable)
  (sensible-defaults/shorten-yes-or-no)
  (sensible-defaults/always-highlight-code)
  (sensible-defaults/refresh-buffers-when-files-change)
  (sensible-defaults/show-matching-parens)
  (sensible-defaults/flash-screen-instead-of-ringing-bell)
  (sensible-defaults/set-default-line-length-to 80)
  (sensible-defaults/open-clicked-files-in-same-frame-on-mac)
  (sensible-defaults/yank-to-point-on-mouse-click)
  (sensible-defaults/use-all-keybindings)
  (sensible-defaults/backup-to-temp-directory)
#+END_SRC

* Coding System

#+BEGIN_SRC emacs-lisp
  (defun no-junk-please-were-unixish ()
    (let ((coding-str (symbol-name buffer-file-coding-system)))
      (when (string-match "-\\(?:dos\\|mac\\)$" coding-str)
        (set-buffer-file-coding-system 'mule-utf-8-unix))))

  (add-hook 'find-file-hooks 'no-junk-please-were-unixish)
  (set-language-environment "UTF-8")
  (prefer-coding-system 'mule-utf-8-unix)
  (setq-default buffer-file-coding-system 'utf-8-unix)
  (setq-default default-buffer-file-coding-system 'utf-8-unix)
  (set-default-coding-systems 'mule-utf-8-unix)
  (set-terminal-coding-system 'mule-utf-8-unix)
  (set-keyboard-coding-system 'mule-utf-8-unix)
  (setq coding-system-for-read 'mule-utf-8-unix)
  (setq coding-system-for-write 'mule-utf-8-unix)
  ;; backwards compatibility as default-buffer-file-coding-system
  ;; is deprecated in 23.2.
  (if (boundp 'buffer-file-coding-system)
      (setq-default buffer-file-coding-system 'mule-utf-8-unix)
    (setq default-buffer-file-coding-system 'mule-utf-8-unix))

  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+END_SRC

* Packages

Eventually remove this and switch to use-package

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (setq package-archives '(("gnu"   . "https://raw.githubusercontent.com/d12frosted/elpa-mirror/master/gnu/")
                           ;; default gnu is sometimes broken
                           ;; ("gnu" . "https://elpa.gnu.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")
                           ("marmalade" . "https://marmalade-repo.org/packages/")
                           ("org" . "http://orgmode.org/elpa/")))

  (if (<= emacs-major-version 24)
      (package-initialize))

  (if (>= emacs-major-version 24)
      (setq package-list '(use-package
                           js2-mode
                           matlab-mode
                           multi-web-mode
                           pov-mode
                           cython-mode
                           auto-complete-nxml
                           virtualenv
                           cuda-mode
                           autopair
                           org
                           markdown-mode
                           json-mode
                           json-reformat
                           csv-mode
                           highlight-indentation
                           typescript-mode
                           auto-complete
                           yasnippet
                           expand-region
                           change-inner
                           projectile
                           flx-ido
                           avy
			                     magit
                           )))

  (if (>= emacs-major-version 25)
      (cons package-list '(arduino-mode
                           )))

  ;; make sure to have downloaded archive description.
  ;; or use package-archive-contents as suggested by Nicolas Dudebout
  (or (file-exists-p package-user-dir)
      (package-refresh-contents))

  ;; install the missing packages
  (dolist (package package-list)
    (unless (package-installed-p package)
      (package-install package)))
#+END_SRC

* Package Settings

Eventually switch over to use-package, but for now...

#+BEGIN_SRC emacs-lisp
;; nXML
(eval-after-load "auto-complete-nxml"
  '(progn
     (add-to-list 'auto-mode-alist '("\\.pt\\'" . nxml-mode))))

(setq auto-mode-alist (cons '("\.cl$" . c-mode) auto-mode-alist))

(autoload 'markdown-mode "markdown-mode"
  "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

;; Unfortunately many standard c++ header files have no file
;; extension, and so will not typically be identified by emacs as c++
;; files. The following code is intended to solve this problem.
(require 'cl)

(defun file-in-directory-list-p (file dirlist)
  "Returns true if the file specified is contained within one of
the directories in the list. The directories must also exist."
  (let ((dirs (mapcar 'expand-file-name dirlist))
        (filedir (expand-file-name (file-name-directory file))))
    (and
     (file-directory-p filedir)
     (member-if (lambda (x) ; Check directory prefix matches
                  (string-match (substring x 0 (min(length filedir) (length x))) filedir))
                dirs))))

(defun buffer-standard-include-p ()
  "Returns true if the current buffer is contained within one of
the directories in the INCLUDE environment variable."
  (and (getenv "INCLUDE")
       (file-in-directory-list-p buffer-file-name (split-string (getenv "INCLUDE") path-separator))))

(add-to-list 'magic-fallback-mode-alist '(buffer-standard-include-p . c++-mode))

;; function decides whether .h file is C or C++ header, sets C++ by
;; default because there's more chance of there being a .h without a
;; .cc than a .h without a .c (ie. for C++ template files)
(defun c-c++-header ()
  "sets either c-mode or c++-mode, whichever is appropriate for
header"
  (interactive)
  (let ((c-file (concat (substring (buffer-file-name) 0 -1) "c")))
    (if (file-exists-p c-file)
        (c-mode)
      (c++-mode))))
(add-to-list 'auto-mode-alist '("\\.h\\'" . c-c++-header))
;; and if that doesn't work, a function to toggle between c-mode and
;; c++-mode
(defun c-c++-toggle ()
  "toggles between c-mode and c++-mode"
  (interactive)
  (cond ((string= major-mode "c-mode")
         (c++-mode))
        ((string= major-mode "c++-mode")
         (c-mode))))

(add-to-list 'auto-mode-alist '("\\.ino\\'" . c++-mode))

;; ROS style formatting
(defun ROS-c-mode-hook()
  (setq c-basic-offset 2)
  (setq indent-tabs-mode nil)
  (c-set-offset 'substatement-open 0)
  (c-set-offset 'innamespace 0)
  (c-set-offset 'case-label '+)
  (c-set-offset 'brace-list-open 0)
  (c-set-offset 'brace-list-intro '+)
  (c-set-offset 'member-init-intro 0)
  (c-set-offset 'statement-case-open 0))
(add-hook 'c-mode-common-hook 'ROS-c-mode-hook)

(require 'autopair)
(autopair-global-mode)

(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(setq css-indent-offset 2)

(add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))

;; roslaunch highlighting
(add-to-list 'auto-mode-alist '("\\.launch$" . xml-mode))

(autoload 'cuda-mode "cuda-mode.el")
(add-to-list 'auto-mode-alist '("\\.cu\\'" . cuda-mode))
(add-to-list 'auto-mode-alist '("\\.cuh\\'" . cuda-mode))

(require 'find-dired)
(setq find-ls-option '("-print0 | xargs -0 ls -ld" . "-ld"))

;; autoindent
(define-key global-map (kbd "RET") 'newline-and-indent)

;; json
(setq js-indent-level 2)

;; json-reformat
(setq json-reformat:indent-width 2)

;; highlight-indentation
(require 'highlight-indentation)
(add-hook 'python-mode-hook 'highlight-indentation-mode)
(add-hook 'js2-mode-hook 'highlight-indentation-mode)
(add-hook 'typescript-mode-hook 'highlight-indentation-mode)
(defun aj-toggle-fold ()
  "Toggle fold all lines larger than indentation on current line"
  (interactive)
  (let ((col 1))
    (save-excursion
      (back-to-indentation)
      (setq col (+ 1 (current-column)))
      (set-selective-display
       (if selective-display nil (or col 1))))))
(global-set-key [(M C i)] 'aj-toggle-fold)

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(js2-basic-offset 2)
 '(typescript-indent-level 2))

;; enable subword-mode for all programming modes
;; to make kill-word work on CamelCase.
(add-hook 'prog-mode-hook 'subword-mode)

;; auto-complete
(ac-config-default)

;; turn on ede mode
(global-ede-mode 1)

;; enable ido everywhere
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)
;; disable ido faces to see flx highlights.
(setq ido-enable-flex-matching t)
(setq ido-use-faces nil)

;; projectile
(projectile-global-mode)

;; temporary fix for region highlighting bug
;; delete this line when fixed
(setq shift-select-mode nil)

;; do not save customizations in init.el
(defconst custom-file (expand-file-name "custom.el" user-emacs-directory))
(unless (file-exists-p custom-file)
  (write-region "" nil custom-file))
(load custom-file)

;; avy
(global-set-key (kbd "C-;") 'avy-goto-char-2)

;; Update packages manually to prevent emacs from taking a long time to
;; load.
;; M-x package-list-packages
;; U x
#+END_SRC

* Configure =use-package=

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (setq use-package-verbose t)
  (setq use-package-always-ensure t)

  (require 'use-package)
#+END_SRC

Always compile packages, and use the newest version available.

#+BEGIN_SRC emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)
#+END_SRC

* Set personal information

** Who am I? Where am I?

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Peter Polidoro"
        user-mail-address "peterpolidoro@gmail.com"
        calendar-latitude 39.0714137
        calendar-longitude -77.4664588
        calendar-location-name "Ashburn, VA")
#+END_SRC

* Utility functions

Define a big ol' bunch of handy utility functions.

#+BEGIN_SRC emacs-lisp
  (defun pjp/view-buffer-name ()
    "Display the filename of the current buffer."
    (interactive)
    (message (buffer-file-name)))

  (defun pjp/rename-file (new-name)
    (interactive "FNew name: ")
    (let ((filename (buffer-file-name)))
      (if filename
          (progn
            (when (buffer-modified-p)
               (save-buffer))
            (rename-file filename new-name t)
            (kill-buffer (current-buffer))
            (find-file new-name)
            (message "Renamed '%s' -> '%s'" filename new-name))
        (message "Buffer '%s' isn't backed by a file!" (buffer-name)))))

  (defun pjp/generate-scratch-buffer ()
    "Create and switch to a temporary scratch buffer with a random
       name."
    (interactive)
    (switch-to-buffer (make-temp-name "scratch-")))

  (defun pjp/de-unicode ()
    "Tidy up a buffer by replacing all special Unicode characters
       (smart quotes, etc.) with their more sane cousins"
    (interactive)
    (let ((unicode-map '(("[\u2018\|\u2019\|\u201A\|\uFFFD]" . "'")
                         ("[\u201c\|\u201d\|\u201e]" . "\"")
                         ("\u2013" . "--")
                         ("\u2014" . "---")
                         ("\u2026" . "...")
                         ("\u00A9" . "(c)")
                         ("\u00AE" . "(r)")
                         ("\u2122" . "TM")
                         ("[\u02DC\|\u00A0]" . " "))))
      (save-excursion
        (loop for (key . value) in unicode-map
              do
              (goto-char (point-min))
              (replace-regexp key value)))))

  (defun pjp/beautify-json ()
    "Pretty-print the JSON in the marked region. Currently shells
       out to `jsonpp'--be sure that's installed!"
    (interactive)
    (save-excursion
      (shell-command-on-region (mark) (point) "jsonpp" (buffer-name) t)))

  (defun pjp/unfill-paragraph ()
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive)
    (let ((fill-column (point-max)))
      (fill-paragraph nil)))

  (defun pjp/kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))

  (defun pjp/visit-last-dired-file ()
    "Open the last file in an open dired buffer."
    (end-of-buffer)
    (previous-line)
    (dired-find-file))

  (defun pjp/visit-last-migration ()
    "Open the last file in 'db/migrate/'. Relies on projectile. Pretty sloppy."
    (interactive)
    (dired (expand-file-name "db/migrate" (projectile-project-root)))
    (pjp/visit-last-dired-file)
    (kill-buffer "migrate"))

  (defun pjp/add-auto-mode (mode &rest patterns)
    "Add entries to `auto-mode-alist' to use `MODE' for all given file `PATTERNS'."
    (dolist (pattern patterns)
      (add-to-list 'auto-mode-alist (cons pattern mode))))

  (defun pjp/find-file-as-sudo ()
    (interactive)
    (let ((file-name (buffer-file-name)))
      (when file-name
        (find-alternate-file (concat "/sudo::" file-name)))))

  (defun pjp/region-or-word ()
    (if mark-active
        (buffer-substring-no-properties (region-beginning)
                                        (region-end))
      (thing-at-point 'word)))

  (defun pjp/insert-random-string (len)
    "Insert a random alphanumeric string of length len."
    (interactive)
    (let ((mycharset "1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstyvwxyz"))
      (dotimes (i len)
        (insert (elt mycharset (random (length mycharset)))))))

  (defun pjp/generate-password ()
    "Insert a good alphanumeric password of length 30."
    (interactive)
    (pjp/insert-random-string 30))

  (defun pjp/append-to-path (path)
    "Add a path both to the $PATH variable and to Emacs' exec-path."
    (setenv "PATH" (concat (getenv "PATH") ":" path))
    (add-to-list 'exec-path path))

  (defun iwb ()
    "indent whole buffer"
    (interactive)
    (delete-trailing-whitespace)
    (indent-region (point-min) (point-max) nil)
    (untabify (point-min) (point-max)))
#+END_SRC

* UI preferences

** Tweak window chrome

I don't usually use the tool or scroll bar, and they take up useful space.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode 1)
  (when window-system
    (scroll-bar-mode -1))
#+END_SRC

Show path of buffer.

#+BEGIN_SRC emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
(setq-default frame-title-format "%b (%f)")
#+END_SRC

** Use fancy lambdas

Why not?

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
(load-theme 'euphoria t t)
(enable-theme 'euphoria)
(setq color-theme-is-global t)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
#+END_SRC

** Disable visual bell

=sensible-defaults= replaces the audible bell with a visual one, but I really
don't even want that (and my Emacs/Mac pair renders it poorly). This disables
the bell altogether.

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Scroll conservatively

When point goes outside the window, Emacs usually recenters the buffer point.
I'm not crazy about that. This changes scrolling behavior to only scroll as far
as point goes.

#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

** Set default font and configure font resizing

   I'm partial to Inconsolata.

The standard =text-scale-= functions just resize the text in the current buffer;
I'd generally like to resize the text in /every/ buffer, and I usually want to
change the size of the modeline, too (this is especially helpful when
presenting). These functions and bindings let me resize everything all together!

Note that this overrides the default font-related keybindings from
=sensible-defaults=.

#+BEGIN_SRC emacs-lisp
;;  (setq pjp/default-font "Inconsolata")
  (setq pjp/default-font "Monospace")
  (setq pjp/default-font-size 10)
  (setq pjp/current-font-size pjp/default-font-size)

  (setq pjp/font-change-increment 1.1)

  (defun pjp/font-code ()
    "Return a string representing the current font (like \"Inconsolata-14\")."
    (concat pjp/default-font "-" (number-to-string pjp/current-font-size)))

  (defun pjp/set-font-size ()
    "Set the font to `pjp/default-font' at `pjp/current-font-size'.
  Set that for the current frame, and also make it the default for
  other, future frames."
    (let ((font-code (pjp/font-code)))
      (add-to-list 'default-frame-alist (cons 'font font-code))
      (set-frame-font font-code)))

  (defun pjp/reset-font-size ()
    "Change font size back to `pjp/default-font-size'."
    (interactive)
    (setq pjp/current-font-size pjp/default-font-size)
    (pjp/set-font-size))

  (defun pjp/increase-font-size ()
    "Increase current font size by a factor of `pjp/font-change-increment'."
    (interactive)
    (setq pjp/current-font-size
          (ceiling (* pjp/current-font-size pjp/font-change-increment)))
    (pjp/set-font-size))

  (defun pjp/decrease-font-size ()
    "Decrease current font size by a factor of `pjp/font-change-increment', down to a minimum size of 1."
    (interactive)
    (setq pjp/current-font-size
          (max 1
               (floor (/ pjp/current-font-size pjp/font-change-increment))))
    (pjp/set-font-size))

  (define-key global-map (kbd "C-)") 'pjp/reset-font-size)
  (define-key global-map (kbd "C-+") 'pjp/increase-font-size)
  (define-key global-map (kbd "C-=") 'pjp/increase-font-size)
  (define-key global-map (kbd "C-_") 'pjp/decrease-font-size)
  (define-key global-map (kbd "C--") 'pjp/decrease-font-size)

  (pjp/reset-font-size)
#+END_SRC

** Hide certain modes from the modeline

I'd rather have only a few necessary mode identifiers on my modeline. This
either hides or "renames" a variety of major or minor modes using the =diminish=
package.

#+BEGIN_SRC emacs-lisp
  ;; (defmacro diminish-minor-mode (filename mode &optional abbrev)
  ;;   `(eval-after-load (symbol-name ,filename)
  ;;      '(diminish ,mode ,abbrev)))

  ;; (defmacro diminish-major-mode (mode-hook abbrev)
  ;;   `(add-hook ,mode-hook
  ;;              (lambda () (setq mode-name ,abbrev))))

  ;; (diminish-minor-mode 'abbrev 'abbrev-mode)
  ;; (diminish-minor-mode 'simple 'auto-fill-function)
  ;; (diminish-minor-mode 'eldoc 'eldoc-mode)
  ;; (diminish-minor-mode 'flycheck 'flycheck-mode)
  ;; (diminish-minor-mode 'flyspell 'flyspell-mode)
  ;; (diminish-minor-mode 'global-whitespace 'global-whitespace-mode)
  ;; (diminish-minor-mode 'subword 'subword-mode)
  ;; (diminish-minor-mode 'undo-tree 'undo-tree-mode)
  ;; (diminish-minor-mode 'yard-mode 'yard-mode)
  ;; (diminish-minor-mode 'yasnippet 'yas-minor-mode)
  ;; (diminish-major-mode 'emacs-lisp-mode-hook "el")
  ;; (diminish-major-mode 'haskell-mode-hook "λ=")
  ;; (diminish-major-mode 'lisp-interaction-mode-hook "λ")
  ;; (diminish-major-mode 'python-mode-hook "Py")
#+END_SRC

** Truncate lines

#+BEGIN_SRC emacs-lisp
(set-default 'truncate-lines t)
(setq truncate-partial-width-windows t)
#+END_SRC

** Display extra information

#+BEGIN_SRC emacs-lisp
(global-linum-mode t)
(line-number-mode t)
(column-number-mode t)
#+END_SRC

** Kill whole line

#+BEGIN_SRC emacs-lisp
(setq kill-whole-line t)
#+END_SRC

* Programming customizations

I like shallow indentation, but tabs are displayed as 8 characters by default.
This reduces that.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
#+END_SRC

Treating terms in CamelCase symbols as separate words makes editing a little
easier for me, so I like to use =subword-mode= everywhere.

#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC

Compilation output goes to the =*compilation*= buffer. I rarely have that window
selected, so the compilation output disappears past the bottom of the window.
This automatically scrolls the compilation window so I can always see the
output.

#+BEGIN_SRC emacs-lisp
  (setq compilation-scroll-output t)
#+END_SRC

** CSS and Sass

Indent 2 spaces and use =rainbow-mode= to display color-related words in the
color they describe.

#+BEGIN_SRC emacs-lisp
  (add-hook 'css-mode-hook
            (lambda ()
              (rainbow-mode)
              (setq css-indent-offset 2)))

  (add-hook 'scss-mode-hook 'rainbow-mode)
#+END_SRC

Don't compile the current file every time I save.

#+BEGIN_SRC emacs-lisp
  (setq scss-compile-at-save nil)
#+END_SRC

** JavaScript and CoffeeScript

Indent everything by 2 spaces.

#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)

  (add-hook 'coffee-mode-hook
            (lambda ()
              (yas-minor-mode 1)
              (setq coffee-tab-width 2)))
#+END_SRC

** Magit

I bring up the status menu with =C-x g=:

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

The default behavior of =magit= is to ask before pushing. I haven't had any
problems with accidentally pushing, so I'd rather not confirm that every time.

#+BEGIN_SRC emacs-lisp
  (setq magit-push-always-verify nil)
#+END_SRC

Enable spellchecking when writing commit messages:

#+BEGIN_SRC emacs-lisp
  (add-hook 'git-commit-mode-hook 'turn-on-flyspell)
#+END_SRC

I sometimes use =git= from the terminal, and I'll use =emacsclient --tty= to
write commits. I'd like to be in the insert state when my editor pops open for
that.

** Python

Indent 4 spaces.

#+BEGIN_SRC emacs-lisp
  (setq python-indent 4)
#+END_SRC

** =sh=

Indent with 2 spaces.

#+BEGIN_SRC emacs-lisp
  (add-hook 'sh-mode-hook
            (lambda ()
              (setq sh-basic-offset 2
                    sh-indentation 2)))
#+END_SRC

** =web-mode=

If I'm in =web-mode=, I'd like to:

- Color color-related words with =rainbow-mode=.
- Still be able to run RSpec tests from =web-mode= buffers.
- Indent everything with 2 spaces.

#+BEGIN_SRC emacs-lisp
  (add-hook 'web-mode-hook
            (lambda ()
              (rainbow-mode)
              (rspec-mode)
              (setq web-mode-markup-indent-offset 2)))
#+END_SRC

Use =web-mode= with embedded Ruby files, regular HTML, and PHP.

#+BEGIN_SRC emacs-lisp
  (pjp/add-auto-mode
   'web-mode
   "\\.erb$"
   "\\.html$"
   "\\.php$"
   "\\.rhtml$")
#+END_SRC

** YAML

If I'm editing YAML I'm usually in a Rails project. I'd like to be able to run
the tests from any buffer.

#+BEGIN_SRC emacs-lisp
  (add-hook 'yaml-mode-hook 'rspec-mode)
#+END_SRC

* Terminal

I use =multi-term= to manage my shell sessions. It's bound to =C-c t=.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c t") 'multi-term)
#+END_SRC

Use a login shell:

#+BEGIN_SRC emacs-lisp
  (setq multi-term-program-switches "--login")
#+END_SRC

I add a bunch of hooks to =term-mode=:

- I'd like links (URLs, etc) to be clickable.
- Yanking in =term-mode= doesn't quite work. The text from the paste appears in
  the buffer but isn't sent to the shell process. This correctly binds =C-y= and
  middle-click to yank the way we'd expect.
- I bind =M-o= to quickly change windows. I'd like that in terminals, too.
- I don't want to perform =yasnippet= expansion when tab-completing.

#+BEGIN_SRC emacs-lisp
  (defun pjp/term-paste (&optional string)
    (interactive)
    (process-send-string
     (get-buffer-process (current-buffer))
     (if string string (current-kill 0))))

  (add-hook 'term-mode-hook
            (lambda ()
              (goto-address-mode)
              (define-key term-raw-map (kbd "C-y") 'pjp/term-paste)
              (define-key term-raw-map (kbd "<mouse-2>") 'pjp/term-paste)
              (define-key term-raw-map (kbd "M-o") 'other-window)
              (setq yas-dont-activate t)))
#+END_SRC

* Editing settings

** Quickly visit Emacs configuration

I futz around with my dotfiles a lot. This binds =C-c e= to quickly open my
Emacs configuration file.

#+BEGIN_SRC emacs-lisp
  (defun pjp/visit-emacs-config ()
    (interactive)
    (find-file "~/.emacs.d/configuration.org"))

  (global-set-key (kbd "C-c e") 'pjp/visit-emacs-config)
#+END_SRC

** Always kill current buffer

Assume that I always want to kill the current buffer when hitting =C-x k=.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x k") 'pjp/kill-current-buffer)
#+END_SRC

** Look for executables in =/usr/local/bin=.

#+BEGIN_SRC emacs-lisp
  (pjp/append-to-path "/usr/local/bin")
#+END_SRC

** Always indent with spaces

Never use tabs. Tabs are the devil’s whitespace.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

** Configure yasnippet

I keep my snippets in =~/.emacs/snippets/text-mode=, and I always want =yasnippet=
enabled.

#+BEGIN_SRC emacs-lisp
  (yas-global-mode 1)
(setq yas-snippet-dirs (append '("~/.emacs.d/snippets/")
                        yas-snippet-dirs))
(yas-reload-all)
#+END_SRC

I /don’t/ want =ido= to automatically indent the snippets it inserts. Sometimes
this looks pretty bad (when indenting org-mode, for example, or trying to guess
at the correct indentation for Python).

#+BEGIN_SRC emacs-lisp
  ;; (setq yas/indent-line nil)
#+END_SRC

** Switch and rebalance windows when splitting

When splitting a window, I invariably want to switch to the new window. This
makes that automatic.

#+BEGIN_SRC emacs-lisp
  ;; (defun pjp/split-window-below-and-switch ()
  ;;   "Split the window horizontally, then switch to the new pane."
  ;;   (interactive)
  ;;   (split-window-below)
  ;;   (balance-windows)
  ;;   (other-window 1))

  ;; (defun pjp/split-window-right-and-switch ()
  ;;   "Split the window vertically, then switch to the new pane."
  ;;   (interactive)
  ;;   (split-window-right)
  ;;   (balance-windows)
  ;;   (other-window 1))

  ;; (global-set-key (kbd "C-x 2") 'pjp/split-window-below-and-switch)
  ;; (global-set-key (kbd "C-x 3") 'pjp/split-window-right-and-switch)
#+END_SRC

* Custom functions

#+BEGIN_SRC emacs-lisp
(defun find-files-not-git ()
  "Find all files in path recursively, not in .git directory."
  (interactive)
  (find-dired default-directory "-type f -not -path \"*/.git/*\""))
#+END_SRC

* Set custom keybindings

#+BEGIN_SRC emacs-lisp
(global-set-key "\M-g" 'goto-line)
(global-set-key (kbd "C-\\") 'er/expand-region)
(global-set-key (kbd "<left>")  'windmove-left)
(global-set-key (kbd "<right>") 'windmove-right)
(global-set-key (kbd "<up>")    'windmove-up)
(global-set-key (kbd "<down>")  'windmove-down)
(require 'change-inner)
(global-set-key (kbd "M-i") 'change-inner)
(global-set-key (kbd "M-o") 'change-outer)
(setq org-descriptive-links nil)
#+END_SRC
