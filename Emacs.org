#+title: Peter Polidoro Emacs Configuration
#+AUTHOR: Peter Polidoro
#+EMAIL: peterpolidoro@gmail.com
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Introduction
  
  This initialization file is inspired by David Wilson https://github.com/daviwil.

#+begin_src emacs-lisp

  ;; NOTE: init.el is generated from Emacs.org.  Please edit that file
  ;;       in Emacs and init.el will be generated automatically!

#+end_src

* Startup Performance

  Make startup faster by reducing the frequency of garbage collection and then
  use a hook to measure Emacs startup time.

#+begin_src emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (message "*** Emacs loaded in %s with %d garbage collections."
		       (format "%.2f seconds"
			       (float-time
				(time-subtract after-init-time before-init-time)))
		       gcs-done)))

#+end_src

* Keep .emacs.d Clean

  I don't want a bunch of transient files showing up as untracked in the Git
  repo so I move them all to another location.

#+begin_src emacs-lisp

  ;; Keep transient cruft out of ~/.emacs.d/
  (setq user-emacs-directory "~/.cache/emacs/"
	backup-directory-alist `(("." . ,(expand-file-name "backups" user-emacs-directory)))
	url-history-file (expand-file-name "url/history" user-emacs-directory)
	auto-save-list-file-prefix (expand-file-name "auto-save-list/.saves-" user-emacs-directory)
	projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" user-emacs-directory))

  ;; Keep customization settings in a temporary file
  (setq custom-file
	(if (boundp 'server-socket-dir)
	    (expand-file-name "custom.el" server-socket-dir)
	  (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  (load custom-file t)

#+end_src

* Package Management

  Set up ELPA, MELPA, and Org package repositories and load =use-package= to
  manage package configuration.

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("melpa-stable" . "https://stable.melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
  (require 'bind-key)                ;; if you use any :bind variant

  (require 'use-package-ensure)
  (setq use-package-always-ensure t)

#+end_src

* Keyboard Bindings

** ESC Cancels All

#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

** Keybinding Panel (which-key)

   [[https://github.com/justbur/emacs-which-key][which-key]] is great for getting an overview of what keybindings are available
   based on the prefix keys you entered.

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))

#+end_src

** Simplify Leader Bindings (general.el)

   [[https://github.com/noctuid/general.el][general.el]] is a fantastic library for defining prefixed keybindings.

#+begin_src emacs-lisp

  ;;(use-package general
  ;;  (general-create-definer pjp/leader-key-def
  ;;    :keymaps '(normal insert visual emacs)
  ;;    :global-prefix "C-."))

#+end_src

* General Configuration

** User Interface

Clean up Emacs' user interface, make it more minimal.

#+begin_src emacs-lisp

  ;; Thanks, but no thanks
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

#+end_src

Improve scrolling.

#+begin_src emacs-lisp


  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1)

#+end_src

Set frame transparency and maximize windows by default.

#+begin_src emacs-lisp

  (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
  (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

#+end_src

Enable line numbers and customize their format.

#+begin_src emacs-lisp

  (column-number-mode)

  ;; Enable line numbers for some modes
  (dolist (mode '(text-mode-hook
                  prog-mode-hook
                  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

  ;; Override some modes which derive from the above
  (dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

Don't warn for large files (shows up when launching videos)

#+begin_src emacs-lisp

  (setq large-file-warning-threshold nil)

#+end_src

Don't warn for following symlinked files

#+begin_src emacs-lisp

  (setq vc-follow-symlinks t)

#+end_src

Don't warn when advice is added for functions

#+begin_src emacs-lisp

  (setq ad-redefinition-action 'accept)

#+end_src

** Theme

#+begin_src emacs-lisp

  (load-theme 'euphoria t t)
  (enable-theme 'euphoria)
  (setq color-theme-is-global t)
  (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

#+end_src

** Font

*** Set the font

    I am using the [[https://github.com/tonsky/FiraCode][Fira Code]] and [[https://fonts.google.com/specimen/Cantarell][Cantarell]] fonts for this configuration which
    will more than likely need to be installed on your machine. Both can usually
    be found in the various Linux distro package managers or downloaded from the
    links above.

#+begin_src emacs-lisp

  ;; You will most likely need to adjust this font size for your system!
  (defvar pjp/default-font-size 120)
  (defvar pjp/default-variable-font-size 120)

  (set-face-attribute 'default nil :font "Fira Code Retina" :height pjp/default-font-size)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height pjp/default-font-size)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height pjp/default-variable-font-size :weight 'regular)

#+end_src

*** Enable proper Unicode glyph support

#+begin_src emacs-lisp

  (defun pjp/replace-unicode-font-mapping (block-name old-font new-font)
    (let* ((block-idx (cl-position-if
                           (lambda (i) (string-equal (car i) block-name))
                           unicode-fonts-block-font-mapping))
           (block-fonts (cadr (nth block-idx unicode-fonts-block-font-mapping)))
           (updated-block (cl-substitute new-font old-font block-fonts :test 'string-equal)))
      (setf (cdr (nth block-idx unicode-fonts-block-font-mapping))
            `(,updated-block))))

  (use-package unicode-fonts
    :custom
    (unicode-fonts-skip-font-groups '(low-quality-glyphs))
    :config
    ;; Fix the font mappings to use the right emoji font
    (mapcar
      (lambda (block-name)
        (pjp/replace-unicode-font-mapping block-name "Apple Color Emoji" "Noto Color Emoji"))
      '("Dingbats"
        "Emoticons"
        "Miscellaneous Symbols and Pictographs"
        "Transport and Map Symbols"))
    (unicode-fonts-setup))

#+end_src

*** Emojis in buffers

#+begin_src emacs-lisp

  (use-package emojify
    :hook (erc-mode . emojify-mode)
    :commands emojify-mode)

#+end_src

** Mode Line

*** Basic Customization

#+begin_src emacs-lisp

  (setq display-time-format "%l:%M %p %b %y"
        display-time-default-load-average nil)

#+end_src

*** Enable Mode Diminishing

The [[https://github.com/myrjola/diminish.el][diminish]] package hides pesky minor modes from the modelines.

#+begin_src emacs-lisp

  (use-package diminish)

#+end_src

** Notifications

   [[https://github.com/jwiegley/alert][alert]] is a great library for showing notifications from other packages in a
   variety of ways. For now I just use it to surface desktop notifications from
   package code.

#+begin_src emacs-lisp

  (use-package alert
    :commands alert
    :config
    (setq alert-default-style 'notifications))

#+end_src

** Auto-Saving Changed Files

#+begin_src emacs-lisp

  (use-package super-save
    :defer 1
    :diminish super-save-mode
    :config
    (super-save-mode +1)
    (setq super-save-auto-save-when-idle t))

#+end_src

** Auto-Reverting Changed Files

#+begin_src emacs-lisp

  (global-auto-revert-mode 1)

#+end_src

** Highlight Matching Braces

#+begin_src emacs-lisp

  (use-package paren
    :config
    (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
    (show-paren-mode 1))

#+end_src

** Displaying World Time

   =display-time-world= command provides a nice display of the time at a
   specified list of timezones. Nice for working in a team with remote members.

#+begin_src emacs-lisp

  (setq display-time-world-list
    '(("America/Los_Angeles" "California")
      ("America/New_York" "New York")
      ("Europe/Athens" "Athens")
      ("Pacific/Auckland" "Auckland")
      ("Asia/Shanghai" "Shanghai")))
  (setq display-time-world-time-format "%a, %d %b %I:%M %p %Z")

#+end_src

** TRAMP

#+begin_src emacs-lisp

  ;; Set default connection mode to SSH
  (setq tramp-default-method "ssh")

#+end_src

* Stateful Keymaps with Hydra

#+begin_src emacs-lisp

  (use-package hydra
    :defer 1)

#+end_src

* Better Completions with Ivy

  I currently use Ivy, Counsel, and Swiper to navigate around files, buffers,
  and projects super quickly.

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper))
    :init
    (ivy-mode 1)
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-wrap t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)

    ;; Use different regex strategies per completion command
    (push '(completion-at-point . ivy--regex-fuzzy) ivy-re-builders-alist) ;; This doesn't seem to work...
    (push '(swiper . ivy--regex-ignore-order) ivy-re-builders-alist)
    (push '(counsel-M-x . ivy--regex-ignore-order) ivy-re-builders-alist)

    ;; Set minibuffer height for different commands
    (setf (alist-get 'counsel-projectile-ag ivy-height-alist) 15)
    (setf (alist-get 'counsel-projectile-rg ivy-height-alist) 15)
    (setf (alist-get 'swiper ivy-height-alist) 15)
    (setf (alist-get 'counsel-switch-buffer ivy-height-alist) 7))

  (use-package ivy-hydra
    :defer t
    :after hydra)

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1)
    :config
    (setq ivy-format-function #'ivy-format-function-line))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
	   ("C-x b" . counsel-ibuffer)
	   ("C-x C-f" . counsel-find-file)
	   ("C-M-l" . counsel-imenu)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^

  (use-package flx  ;; Improves sorting for fuzzy-matched results
    :defer t
    :init
    (setq ivy-flx-limit 10000))

  (use-package smex ;; Adds M-x recent command sorting for counsel-M-x
    :defer 1
    :after counsel)

  (use-package wgrep)

  (use-package ivy-posframe
    :custom
    (ivy-posframe-width      115)
    (ivy-posframe-min-width  115)
    (ivy-posframe-height     10)
    (ivy-posframe-min-height 10)
    :config
    (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
    (setq ivy-posframe-parameters '((parent-frame . nil)
				    (left-fringe . 8)
				    (right-fringe . 8)))
    (ivy-posframe-mode 1))

#+end_src

* UI Configuration

** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs'
=describe-= command buffers.  For example, if you use
=describe-function=, you will not only get the documentation about the
function, you will also see the source code of the function and where
it gets used in other places in the Emacs configuration.  It is very
useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Sensible Defaults

#+begin_src emacs-lisp

  (load-file "~/.emacs.d/sensible-defaults.el")
  (sensible-defaults/increase-gc-threshold)
  (sensible-defaults/treat-camelcase-as-separate-words)
  (sensible-defaults/automatically-follow-symlinks)
  (sensible-defaults/make-scripts-executable)
  (sensible-defaults/single-space-after-periods)
  (sensible-defaults/offer-to-create-parent-directories-on-save)
  (sensible-defaults/apply-changes-to-highlighted-region)
  (sensible-defaults/overwrite-selected-text)
  (sensible-defaults/ensure-that-files-end-with-newline)
  (sensible-defaults/quiet-startup)
  (sensible-defaults/make-dired-file-sizes-human-readable)
  (sensible-defaults/shorten-yes-or-no)
  (sensible-defaults/always-highlight-code)
  (sensible-defaults/refresh-buffers-when-files-change)
  (sensible-defaults/show-matching-parens)
  (sensible-defaults/flash-screen-instead-of-ringing-bell)
  (sensible-defaults/set-default-line-length-to 80)
  (sensible-defaults/yank-to-point-on-mouse-click)
  (sensible-defaults/use-all-keybindings)
  (sensible-defaults/backup-to-temp-directory)

#+end_src

