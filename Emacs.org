#+title: Peter Polidoro Emacs Configuration
#+AUTHOR: Peter Polidoro
#+EMAIL: peterpolidoro@gmail.com
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Introduction
  
  This initialization file is based on David Wilson's awesome Emacs configuration: https://github.com/daviwil

  This file generates [[file:init.el][init.el]] which will be loaded by Emacs at startup.

  #+begin_src emacs-lisp

		;; NOTE: init.el is generated from Emacs.org.  Please edit that file
		;;       in Emacs and init.el will be generated automatically!

  #+end_src

* Setup
  
** Who am I?

   #+begin_src emacs-lisp

		 (setq user-full-name "Peter Polidoro"
					 user-mail-address "peterpolidoro@gmail.com")

   #+end_src

** Font Size

   #+begin_src emacs-lisp

		 ;; Adjust this font size for each system
		 (defvar pjp/default-font-size 120)
		 (defvar pjp/default-variable-font-size 120)

   #+end_src

** Frame transparency

   #+begin_src emacs-lisp

		 ;; Make frame transparency overridable
		 (defvar pjp/frame-transparency '(95 . 95))

   #+end_src

* Startup Performance

  Make startup faster by reducing the frequency of garbage collection and then
  use a hook to measure Emacs startup time.

  #+begin_src emacs-lisp

		;; The default is 800 kilobytes.  Measured in bytes.
		(setq gc-cons-threshold (* 50 1000 1000))

		;; Profile emacs startup
		(add-hook 'emacs-startup-hook
							(lambda ()
								(message "*** Emacs loaded in %s with %d garbage collections."
												 (format "%.2f seconds"
																 (float-time
																	(time-subtract after-init-time before-init-time)))
												 gcs-done)))

  #+end_src

* Handle Warnings

  Package cl is deprecated, remove warning.

  #+begin_src emacs-lisp

		;;(require 'loadhist)
		;;(file-dependents (feature-file 'cl))
		(setq byte-compile-warnings '(cl-functions))

  #+end_src

* Keep .emacs.d Clean

  I don't want a bunch of transient files showing up as untracked in the Git
  repo so I move them all to another location.

  #+begin_src emacs-lisp

		;; Keep transient cruft out of ~/.emacs.d/
		(setq user-emacs-directory "~/.cache/emacs/"
					backup-directory-alist `(("." . ,(expand-file-name "backups" user-emacs-directory)))
					url-history-file (expand-file-name "url/history" user-emacs-directory)
					auto-save-list-file-prefix (expand-file-name "auto-save-list/.saves-" user-emacs-directory)
					projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" user-emacs-directory))

		;; Keep customization settings in a temporary file
		(setq custom-file
					(if (boundp 'server-socket-dir)
							(expand-file-name "custom.el" server-socket-dir)
						(expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
		(load custom-file t)

  #+end_src

* Package System Setup

  Set up ELPA, MELPA, and Org package repositories and load =use-package= to
  manage package configuration.

  #+begin_src emacs-lisp

		;; Initialize package sources
		(require 'package)

		(setq package-archives '(("melpa" . "https://melpa.org/packages/")
														 ("melpa-stable" . "https://stable.melpa.org/packages/")
														 ("org" . "https://orgmode.org/elpa/")
														 ("elpa" . "https://elpa.gnu.org/packages/")))

		(package-initialize)
		(unless package-archive-contents
			(package-refresh-contents))

		;; Initialize use-package on non-Linux platforms
		(unless (package-installed-p 'use-package)
			(package-install 'use-package))

		(eval-when-compile
			(require 'use-package))
		(require 'bind-key)                ;; if you use any :bind variant

		(require 'use-package-ensure)
		(setq use-package-always-ensure t)

  #+end_src

* Keyboard Bindings

** ESC Cancels All

   #+begin_src emacs-lisp

		 (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

   #+end_src

** Keybinding Panel (which-key)

   [[https://github.com/justbur/emacs-which-key][which-key]] is great for getting an overview of what keybindings are available
   based on the prefix keys you entered.

   #+begin_src emacs-lisp

		 (use-package which-key
			 :init (which-key-mode)
			 :diminish which-key-mode
			 :config
			 (setq which-key-idle-delay 0.3))

   #+end_src

* General Configuration

** User Interface

*** Clean up Emacs' user interface, make it more minimal.

    #+begin_src emacs-lisp

			;; Thanks, but no thanks
			(setq inhibit-startup-message t)

			(scroll-bar-mode -1)        ; Disable visible scrollbar
			(tool-bar-mode -1)          ; Disable the toolbar
			(tooltip-mode -1)           ; Disable tooltips
			(set-fringe-mode 10)        ; Give some breathing room

			(menu-bar-mode -1)            ; Disable the menu bar

			;; Set up the visible bell
			(setq visible-bell t)

    #+end_src

*** Improve scrolling.

    #+begin_src emacs-lisp

			(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
			(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
			(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
			(setq scroll-step 1)

    #+end_src

*** Set frame transparency and maximize windows by default.

    #+begin_src emacs-lisp

			(set-frame-parameter (selected-frame) 'alpha pjp/frame-transparency)
			(add-to-list 'default-frame-alist `(alpha . ,pjp/frame-transparency))
			(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
			(add-to-list 'default-frame-alist '(fullscreen . maximized))

    #+end_src

*** Enable line numbers and customize their format.

    #+begin_src emacs-lisp

			(column-number-mode)

			;; Enable line numbers for some modes
			(dolist (mode '(text-mode-hook
											prog-mode-hook
											conf-mode-hook))
				(add-hook mode (lambda () (display-line-numbers-mode 1))))

			;; Disable line numbers for some modes
			(dolist (mode '(org-mode-hook
											term-mode-hook
											shell-mode-hook
											treemacs-mode-hook
											eshell-mode-hook))
				(add-hook mode (lambda () (display-line-numbers-mode 0))))

    #+end_src

*** Don't warn for large files (shows up when launching videos)

    #+begin_src emacs-lisp

			(setq large-file-warning-threshold nil)

    #+end_src

*** Don't warn for following symlinked files

    #+begin_src emacs-lisp

			(setq vc-follow-symlinks t)

    #+end_src

*** Don't warn when advice is added for functions

    #+begin_src emacs-lisp

			(setq ad-redefinition-action 'accept)

    #+end_src

*** Kill whole line

    #+BEGIN_SRC emacs-lisp
			(setq kill-whole-line t)
    #+END_SRC

*** Fill-column

    #+BEGIN_SRC emacs-lisp
			(setq-default fill-column 80)
    #+END_SRC

*** Treat camel case as separate words

    #+begin_src emacs-lisp

			(add-hook 'prog-mode-hook 'subword-mode)

    #+end_src

*** Make scripts executable

    #+begin_src emacs-lisp

			(add-hook 'after-save-hook
								'executable-make-buffer-file-executable-if-script-p)

    #+end_src

*** Single space after periods

    #+begin_src emacs-lisp

			(setq sentence-end-double-space nil)

    #+end_src

*** Offer to create parent directories on save

    #+begin_src emacs-lisp

			(add-hook 'before-save-hook
								(lambda ()
									(when buffer-file-name
										(let ((dir (file-name-directory buffer-file-name)))
											(when (and (not (file-exists-p dir))
																 (y-or-n-p (format "Directory %s does not exist. Create it?" dir)))
												(make-directory dir t))))))

    #+end_src

*** Apply changes to higlighted region

    #+begin_src emacs-lisp

			(transient-mark-mode t)

    #+end_src

*** Overwrite selected text

    #+begin_src emacs-lisp

			(delete-selection-mode t)

    #+end_src

*** Refresh buffers when files change

    #+begin_src emacs-lisp

			(global-auto-revert-mode t)

    #+end_src

*** Yank to point on mouse click

    #+begin_src emacs-lisp

			(setq mouse-yank-at-point t)

    #+end_src

*** Ensure files end with newline

    #+begin_src emacs-lisp

			(setq require-final-newline t)

    #+end_src

*** Shorten yes or no

    #+begin_src emacs-lisp

			(fset 'yes-or-no-p 'y-or-n-p)

    #+end_src

*** Confirm closing Emacs

    #+begin_src emacs-lisp

			(setq confirm-kill-emacs 'y-or-n-p)

    #+end_src

*** Bind keys to change text size

    #+begin_src emacs-lisp

			(defhydra hydra-zoom (global-map "C-=")
				"zoom"
				("=" text-scale-increase "in")
				("-" text-scale-decrease "out"))

    #+end_src

*** Use UTF-8

    #+begin_src emacs-lisp

			(prefer-coding-system 'utf-8)
			(set-default-coding-systems 'utf-8)
			(set-terminal-coding-system 'utf-8)
			(set-keyboard-coding-system 'utf-8)
			;; backwards compatibility as default-buffer-file-coding-system
			;; is deprecated in 23.2.
			(if (boundp 'buffer-file-coding-system)
					(setq-default buffer-file-coding-system 'utf-8)
				(setq default-buffer-file-coding-system 'utf-8))

			;; Treat clipboard input as UTF-8 string first; compound text next, etc.
			(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

    #+end_src

*** Use smartparens

    #+begin_src emacs-lisp

			(use-package smartparens
				:config
				(smartparens-global-mode t)

				(sp-pair "'" nil :actions :rem)
				(sp-pair "`" nil :actions :rem)
				(setq sp-highlight-pair-overlay nil))

    #+end_src

*** Truncate lines

    #+begin_src emacs-lisp

			(set-default 'truncate-lines t)
			(setq truncate-partial-width-windows t)

    #+end_src

*** Default tab width

    #+begin_src emacs-lisp

			(setq-default tab-width 2)

    #+end_src

*** Windmove

    #+begin_src emacs-lisp

			(global-set-key (kbd "s-b")  'windmove-left)
			(global-set-key (kbd "s-f") 'windmove-right)
			(global-set-key (kbd "s-p")    'windmove-up)
			(global-set-key (kbd "s-n")  'windmove-down)

    #+end_src

** Theme

   #+begin_src emacs-lisp

		 (load-theme 'euphoria t t)
		 (enable-theme 'euphoria)
		 (setq color-theme-is-global t)
		 (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

   #+end_src

** Font

*** Set the font

    I am using the [[https://github.com/tonsky/FiraCode][Fira Code]] and [[https://fonts.google.com/specimen/Cantarell][Cantarell]] fonts for this configuration which
    will more than likely need to be installed on your machine. Both can usually
    be found in the various Linux distro package managers or downloaded from the
    links above.

    #+begin_src emacs-lisp

			(set-face-attribute 'default nil :font "Fira Code Retina" :height pjp/default-font-size)

			;; Set the fixed pitch face
			(set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height pjp/default-font-size)

			;; Set the variable pitch face
			(set-face-attribute 'variable-pitch nil :font "Cantarell" :height pjp/default-variable-font-size :weight 'regular)

    #+end_src

*** Enable proper Unicode glyph support

    #+begin_src emacs-lisp

			(defun pjp/replace-unicode-font-mapping (block-name old-font new-font)
				(let* ((block-idx (cl-position-if
													 (lambda (i) (string-equal (car i) block-name))
													 unicode-fonts-block-font-mapping))
							 (block-fonts (cadr (nth block-idx unicode-fonts-block-font-mapping)))
							 (updated-block (cl-substitute new-font old-font block-fonts :test 'string-equal)))
					(setf (cdr (nth block-idx unicode-fonts-block-font-mapping))
								`(,updated-block))))

			(use-package unicode-fonts
				:custom
				(unicode-fonts-skip-font-groups '(low-quality-glyphs))
				:config
				;; Fix the font mappings to use the right emoji font
				(mapcar
				 (lambda (block-name)
					 (pjp/replace-unicode-font-mapping block-name "Apple Color Emoji" "Noto Color Emoji"))
				 '("Dingbats"
					 "Emoticons"
					 "Miscellaneous Symbols and Pictographs"
					 "Transport and Map Symbols"))
				(unicode-fonts-setup))

    #+end_src

*** Emojis in buffers

    #+begin_src emacs-lisp

			(use-package emojify
				:hook (erc-mode . emojify-mode)
				:commands emojify-mode)

    #+end_src

*** All the icons

    *NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that icons display correctly.

    #+begin_src emacs-lisp

			(use-package all-the-icons)

    #+end_src

** Mode Line

*** Doom Mode Line

    #+begin_src emacs-lisp

			(use-package doom-modeline
				:init (doom-modeline-mode 1)
				:custom ((doom-modeline-height 15)))

    #+end_src
*** Basic Customization

    #+begin_src emacs-lisp

			(setq display-time-format "%l:%M %p %b %y"
						display-time-default-load-average nil)

    #+end_src

*** Enable Mode Diminishing

    The [[https://github.com/myrjola/diminish.el][diminish]] package hides pesky minor modes from the modelines.

    #+begin_src emacs-lisp

			(use-package diminish)

    #+end_src

** Notifications

   [[https://github.com/jwiegley/alert][alert]] is a great library for showing notifications from other packages in a
   variety of ways. For now I just use it to surface desktop notifications from
   package code.

   #+begin_src emacs-lisp

		 (use-package alert
			 :commands alert
			 :config
			 (setq alert-default-style 'notifications))

   #+end_src

** Auto-Saving Changed Files

   #+begin_src emacs-lisp

		 (use-package super-save
			 :defer 1
			 :diminish super-save-mode
			 :config
			 (super-save-mode +1)
			 (setq super-save-auto-save-when-idle t))

   #+end_src

** Auto-Reverting Changed Files

   #+begin_src emacs-lisp

		 (global-auto-revert-mode 1)

   #+end_src

** Highlight Matching Braces

   #+begin_src emacs-lisp

		 (use-package paren
			 :config
			 (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
			 (show-paren-mode 1))

   #+end_src

** Displaying World Time

   =display-time-world= command provides a nice display of the time at a
   specified list of timezones. Nice for working in a team with remote members.

   #+begin_src emacs-lisp

		 (setq display-time-world-list
					 '(("America/Los_Angeles" "California")
						 ("America/New_York" "New York")
						 ("Europe/Athens" "Athens")
						 ("Pacific/Auckland" "Auckland")
						 ("Asia/Shanghai" "Shanghai")))
		 (setq display-time-world-time-format "%a, %d %b %I:%M %p %Z")

   #+end_src

** TRAMP

   #+begin_src emacs-lisp

		 ;; Set default connection mode to SSH
		 (setq tramp-default-method "ssh")

   #+end_src

** Stateful Keymaps with Hydra

   #+begin_src emacs-lisp

		 (use-package hydra
			 :defer 1)

   #+end_src

** Better Completions with Ivy

   I currently use Ivy, Counsel, and Swiper to navigate around files, buffers,
   and projects super quickly.

   #+begin_src emacs-lisp

		 (use-package ivy
			 :diminish
			 :bind (("C-s" . swiper))
			 :init
			 (ivy-mode 1)
			 :config
			 (setq ivy-use-virtual-buffers t)
			 (setq ivy-wrap t)
			 (setq ivy-count-format "(%d/%d) ")
			 (setq enable-recursive-minibuffers t)

			 ;; Use different regex strategies per completion command
			 (push '(completion-at-point . ivy--regex-fuzzy) ivy-re-builders-alist) ;; This doesn't seem to work...
			 (push '(swiper . ivy--regex-ignore-order) ivy-re-builders-alist)
			 (push '(counsel-M-x . ivy--regex-ignore-order) ivy-re-builders-alist)

			 ;; Set minibuffer height for different commands
			 (setf (alist-get 'counsel-projectile-ag ivy-height-alist) 15)
			 (setf (alist-get 'counsel-projectile-rg ivy-height-alist) 15)
			 (setf (alist-get 'swiper ivy-height-alist) 15)
			 (setf (alist-get 'counsel-switch-buffer ivy-height-alist) 7))

		 (use-package ivy-hydra
			 :defer t
			 :after hydra)

		 (use-package ivy-rich
			 :init
			 (ivy-rich-mode 1)
			 :config
			 (setq ivy-format-function #'ivy-format-function-line))

		 (use-package counsel
			 :bind (("M-x" . counsel-M-x)
							("C-x b" . counsel-ibuffer)
							("C-x C-f" . counsel-find-file)
							("C-M-l" . counsel-imenu)
							([remap describe-function] . counsel-describe-function)
							([remap describe-variable] . counsel-describe-variable)
							:map minibuffer-local-map
							("C-r" . 'counsel-minibuffer-history))
			 :custom
			 (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
			 :config
			 (setq ivy-initial-inputs-alist nil) ;; Don't start searches with ^
			 (counsel-mode 1))

		 (use-package flx  ;; Improves sorting for fuzzy-matched results
			 :defer t
			 :init
			 (setq ivy-flx-limit 10000))

		 (use-package smex ;; Adds M-x recent command sorting for counsel-M-x
			 :defer 1
			 :after counsel)

		 (use-package wgrep)

		 (use-package ivy-posframe
			 :custom
			 (ivy-posframe-width      115)
			 (ivy-posframe-min-width  115)
			 (ivy-posframe-height     10)
			 (ivy-posframe-min-height 10)
			 :config
			 (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
			 (setq ivy-posframe-parameters '((parent-frame . nil)
																			 (left-fringe . 8)
																			 (right-fringe . 8)))
			 (ivy-posframe-mode 1))

   #+end_src

** Helpful Help Commands

	 [[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs'
	 =describe-= command buffers. For example, if you use =describe-function=, you
	 will not only get the documentation about the function, you will also see the
	 source code of the function and where it gets used in other places in the
	 Emacs configuration. It is very useful for figuring out how things work in
	 Emacs.
	 
	 #+begin_src emacs-lisp

		 (use-package helpful
			 :custom
			 (counsel-describe-function-function #'helpful-callable)
			 (counsel-describe-variable-function #'helpful-variable)
			 :bind
			 ([remap describe-function] . counsel-describe-function)
			 ([remap describe-command] . helpful-command)
			 ([remap describe-variable] . counsel-describe-variable)
			 ([remap describe-key] . helpful-key)
			 ("C-." . helpful-at-point)
			 ("C-h c". helpful-command))

	 #+end_src

** Jumping with Avy

   #+begin_src emacs-lisp

		 (use-package avy
			 :commands (avy-goto-char avy-goto-word-0 avy-goto-line))

		 (use-package avy
			 :bind (("C-:" . avy-goto-char)
							("C-;" . avy-goto-char-2)
							("M-g f" . avy-goto-line)
							("M-g w" . avy-goto-word-1)
							("M-g e" . avy-goto-word-0)))

   #+end_src

** Expand Region

   This module is absolutely necessary for working inside of Emacs Lisp files,
   especially when trying to some parent of an expression (like a =setq=).  Makes
   tweaking Org agenda views much less annoying.

   #+begin_src emacs-lisp

		 (use-package expand-region
			 :bind (("M-[" . er/expand-region)
							("M-]" . er/contract-region)
							("C-(" . er/mark-outside-pairs)
							("C-)" . er/mark-inside-pairs)))

   #+end_src

* File Browsing

** Dired

   #+begin_src emacs-lisp

		 (use-package dired
			 :ensure nil
			 :defer 1
			 :hook (dired-mode . dired-hide-details-mode)
			 :bind (:map dired-mode-map
									 ("C-b" . dired-single-up-directory)
									 ("C-f" . dired-single-buffer))
			 :commands (dired dired-jump)
			 :config
			 (setq dired-listing-switches "-agho --group-directories-first"
						 dired-omit-verbose nil)

			 (use-package all-the-icons-dired
				 :hook (dired-mode . all-the-icons-dired-mode)))

		 (use-package dired-hide-dotfiles
			 :hook (dired-mode . dired-hide-dotfiles-mode)
			 :bind (:map dired-mode-map
									 ("." . dired-hide-dotfiles-mode)))

   #+end_src

** Opening Files Externally

   #+begin_src emacs-lisp

		 (use-package openwith
			 :config
			 (setq openwith-associations
						 (list
							(list (openwith-make-extension-regexp
										 '("mpg" "mpeg" "mp3" "mp4"
											 "avi" "wmv" "wav" "mov" "flv"
											 "ogm" "ogg" "mkv"))
										"mpv"
										'(file))
							(list (openwith-make-extension-regexp
										 '("xbm" "pbm" "pgm" "ppm" "pnm"
											 "png" "gif" "bmp" "tif" "jpeg")) ;; Removed jpg because Telega was
										;; causing feh to be opened...
										"feh"
										'(file))
							(list (openwith-make-extension-regexp
										 '("pdf"))
										"zathura"
										'(file))))
			 (openwith-mode 1))

   #+end_src

* Org Mode

  Set up Org Mode with a baseline configuration.  The following sections will add more things to it.

  #+begin_src emacs-lisp

		;; Turn on indentation and auto-fill mode for Org files
		(defun pjp/org-mode-setup ()
			(variable-pitch-mode 1)
			(auto-fill-mode 0))

		(use-package org
			:defer t
			:hook (org-mode . pjp/org-mode-setup)
			:config
			(setq org-src-fontify-natively t
						org-src-tab-acts-natively t
						org-edit-src-content-indentation 2
						org-hide-block-startup nil
						org-src-preserve-indentation nil
						org-startup-folded 'content
						org-cycle-separator-lines 2)

			(org-babel-do-load-languages
			 'org-babel-load-languages
			 '((emacs-lisp . t)
				 (ledger . t)))

			;; NOTE: Subsequent sections are still part of this use-package block!

  #+end_src

** Automatically "Tangle" on Save

   Handy tip from [[https://leanpub.com/lit-config/read#leanpub-auto-configuring-emacs-and--org-mode-for-literate-programming][this book]] on literate programming.

   #+begin_src emacs-lisp

		 ;; Since we don't want to disable org-confirm-babel-evaluate all
		 ;; of the time, do it around the after-save-hook
		 (defun pjp/org-babel-tangle-dont-ask ()
			 ;; Dynamic scoping to the rescue
			 (let ((org-confirm-babel-evaluate nil))
				 (org-babel-tangle)))

		 (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'pjp/org-babel-tangle-dont-ask
																									 'run-at-end 'only-in-org-mode)))

   #+end_src

** Fonts and Bullets

   Set the header font sizes to something more palatable.  A fair amount of inspiration has been taken from [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][this blog post]].

   #+begin_src emacs-lisp

		 (dolist (face '((org-level-1 . 1.2)
										 (org-level-2 . 1.1)
										 (org-level-3 . 1.05)
										 (org-level-4 . 1.0)
										 (org-level-5 . 1.1)
										 (org-level-6 . 1.1)
										 (org-level-7 . 1.1)
										 (org-level-8 . 1.1)))
			 (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

		 ;; Make sure org-indent face is available
		 (require 'org-indent)

		 ;; Ensure that anything that should be fixed-pitch in Org files appears that way
		 (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
		 (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
		 (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
		 (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
		 (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
		 (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
		 (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
		 (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
		 (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch))

   #+end_src

** Block Templates

   These templates enable you to type things like =<el= and then hit =Tab= to expand
   the template.  More documentation can be found at the Org Mode [[https://orgmode.org/manual/Easy-templates.html][Easy Templates]]
   documentation page.

   #+begin_src emacs-lisp

		 ;; This is needed as of Org 9.2
		 (require 'org-tempo)

		 (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
		 (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
		 (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
		 (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
		 (add-to-list 'org-structure-template-alist '("py" . "src python"))
		 (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
		 (add-to-list 'org-structure-template-alist '("json" . "src json"))

   #+end_src

** End =use-package org-mode=

   #+begin_src emacs-lisp

		 ;; This ends the use-package org-mode block
		 )

   #+end_src

* Development

  Configuration for various programming languages and dev tools that I use.

** Languages

*** IDE Features with lsp-mode

**** lsp-mode

		 We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many
		 different programming languages via "language servers" that speak the
		 [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]]. Before trying to set up =lsp-mode= for a
		 particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that
		 you can learn which language servers are available and how to install them.

		 The =lsp-keymap-prefix= setting enables you to define a prefix for where
		 =lsp-mode='s default keybindings will be added. I *highly recommend* using
		 the prefix to find out what you can do with =lsp-mode= in a buffer.

		 The =which-key= integration adds helpful descriptions of the various keys
		 so you should be able to learn a lot just by pressing =C-c l= in a
		 =lsp-mode= buffer and trying different things that you find there.

		 #+begin_src emacs-lisp

			 (defun pjp/lsp-mode-setup ()
				 (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
				 (lsp-headerline-breadcrumb-mode))

			 (use-package lsp-mode
				 :commands (lsp lsp-deferred)
				 :hook (lsp-mode . pjp/lsp-mode-setup)
				 :init
				 (setq lsp-keymap-prefix "s-l")  ;; Or 'C-l', 'C-c l'
				 :config
				 (lsp-enable-which-key-integration t))

		 #+end_src

**** lsp-ui

		 [[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make
		 Emacs feel even more like an IDE. Check out the screenshots on the =lsp-ui=
		 homepage (linked at the beginning of this paragraph) to see examples of
		 what it can do.

		 #+begin_src emacs-lisp

			 (use-package lsp-ui
				 :hook (lsp-mode . lsp-ui-mode)
				 :custom
				 (lsp-ui-doc-position 'bottom))

		 #+end_src

**** lsp-treemacs

		 [[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code
		 like symbols in a file, references of a symbol, or diagnostic messages
		 (errors and warnings) that are found in your code.

		 Try these commands with =M-x=:

		 - =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
		 - =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
		 - =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

		 This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some
		 interest to you if you like to have a file browser at the left side of your
		 screen in your editor.

		 #+begin_src emacs-lisp

			 (use-package lsp-treemacs
				 :after lsp)

		 #+end_src

**** lsp-ivy

		 [[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things
		 by name in your code. When you run these commands, a prompt will appear in
		 the minibuffer allowing you to type part of the name of a symbol in your
		 code. Results will be populated in the minibuffer so that you can find what
		 you're looking for and jump to that location in the code upon selecting the
		 result.

		 Try these commands with =M-x=:

		 - =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
		 - =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

		 #+begin_src emacs-lisp

			 (use-package lsp-ivy
				 :commands lsp-ivy-workspace-symbol)

		 #+end_src

*** Debugging with dap-mode

		[[https://emacs-lsp.github.io/dap-mode/][dap-mode]] is an excellent package for bringing rich debugging capabilities to
		Emacs via the [[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol]]. You should check out the [[https://emacs-lsp.github.io/dap-mode/page/configuration/][configuration
		docs]] to learn how to configure the debugger for your language. Also make
		sure to check out the documentation for the debug adapter to see what
		configuration parameters are available to use for your debug templates!

		#+begin_src emacs-lisp
			(use-package dap-mode
				:ensure t
				:commands dap-mode
				:hook (dap-stopped . (lambda (arg) (call-interactively #'dap-hydra)))
				:config
				(dap-mode 1)
				(require 'dap-ui)
				(dap-ui-mode 1)
				(require 'dap-lldb))

		#+end_src

*** Python

		We use =lsp-mode= and =dap-mode= to provide a more complete development
		environment for Python in Emacs. Check out [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pyls/][the =pyls= configuration]] in the
		=lsp-mode= documentation for more details.

		Make sure you have the =pyls= language server installed before trying =lsp-mode=!

		#+begin_src sh :tangle no

			pip install --user "python-language-server[all]"

		#+end_src

		There are a number of other language servers for Python so if you find that
		=pyls= doesn't work for you, consult the =lsp-mode= [[https://emacs-lsp.github.io/lsp-mode/page/languages/][language configuration
		documentation]] to try the others!

		#+begin_src emacs-lisp

			(use-package python-mode
				:ensure t
				:hook (python-mode . lsp-deferred)
				:custom
				;; NOTE: Set these if Python 3 is called "python3" on your system!
				(python-shell-interpreter "python3")
				(dap-python-executable "python3")
				(dap-python-debugger 'debugpy)
				:config
				(require 'dap-python))


		#+end_src

		You can use the pyvenv package to use =virtualenv= environments in Emacs.
		The =pyvenv-activate= command should configure Emacs to cause =lsp-mode= and
		=dap-mode= to use the virtual environment when they are loaded, just select
		the path to your virtual environment before loading your project.

		#+begin_src emacs-lisp

			(use-package pyvenv
				:config
				(pyvenv-mode 1))

		#+end_src

** Company Mode

	 [[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than
	 =completion-at-point= which is more reminiscent of what you would expect from an
	 IDE. We add a simple configuration to make the keybindings a little more useful
	 (=TAB= now completes the selection and initiates completion at the current
	 location if needed).

	 We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with
	 icons and better overall presentation.

	 #+begin_src emacs-lisp

		 (use-package company
			 :after lsp-mode
			 :hook (lsp-mode . company-mode)
			 :bind (:map company-active-map
									 ("<tab>" . company-complete-selection))
			 (:map lsp-mode-map
						 ("<tab>" . company-indent-or-complete-common))
			 :custom
			 (company-minimum-prefix-length 1)
			 (company-idle-delay 0.0))

		 (use-package company-box
			 :hook (company-mode . company-box-mode))

	 #+end_src

** Git

*** Magit

    https://magit.vc/manual/magit/

    #+begin_src emacs-lisp

			(use-package magit
				:commands (magit-status magit-get-current-branch)
				:diminish magit-auto-revert-mode
				:bind (("C-x g" . magit-status))
				:config
				(progn
					(setq magit-completing-read-function 'ivy-completing-read)
					(setq magit-item-highlight-face 'bold))
				:custom
				(magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

    #+end_src

*** Forge

    #+begin_src emacs-lisp

			(use-package forge
				:disabled)

    #+end_src

*** magit-todos

    This is an interesting extension to Magit that shows a TODOs section in your
    git status buffer containing all lines with TODO (or other similar words) in
    files contained within the repo.  More information at the [[https://github.com/alphapapa/magit-todos][GitHub repo]].

    #+begin_src emacs-lisp

			(use-package magit-todos
				:defer t)

    #+end_src
		
** Projectile

*** Initial Setup

    #+begin_src emacs-lisp

			(use-package projectile
				:diminish projectile-mode
				:config (projectile-mode)
				:bind-keymap
				("C-c p" . projectile-command-map)
				:init
				(when (file-directory-p "~/git")
					(setq projectile-project-search-path '("~/git")))
				(setq projectile-switch-project-action #'projectile-dired))

			(use-package counsel-projectile
				:after projectile)

    #+end_src

*** Project Configurations

    This section contains project configurations for specific projects that I can't
    drop a =.dir-locals.el= file into.  Documentation on this approach can be found in
    the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Directory-Local-Variables.html][Emacs manual]].

    #+begin_src emacs-lisp

    #+end_src

** Languages

*** Language Server Support

    #+begin_src emacs-lisp

			(use-package ivy-xref
				:init (if (< emacs-major-version 27)
									(setq xref-show-xrefs-function #'ivy-xref-show-xrefs)
								(setq xref-show-definitions-function #'ivy-xref-show-defs)))

			(use-package lsp-mode
				:commands lsp
				:hook ((python-mode) . lsp)
				:bind (:map lsp-mode-map
										("TAB" . completion-at-point)))

			(use-package lsp-ui
				:hook (lsp-mode . lsp-ui-mode)
				:config
				(setq lsp-ui-sideline-enable t)
				(setq lsp-ui-sideline-show-hover nil)
				(setq lsp-ui-doc-position 'bottom)
				(lsp-ui-doc-show))

    #+end_src

*** Debug Adapter Support

    Not so convinced about this yet.

    #+begin_src emacs-lisp

			;; (use-package dap-mode
			;;   :ensure t
			;;   :hook (lsp-mode . dap-mode)
			;;   :config
			;;   (dap-ui-mode 1)
			;;   (dap-tooltip-mode 1)
			;;   (require 'dap-node)
			;;   (dap-node-setup)

			;;   (dap-register-debug-template "Node: Attach"
			;;     (list :type "node"
			;;           :cwd nil
			;;           :request "attach"
			;;           :program nil
			;;           :port 9229
			;;           :name "Node::Run")))

    #+end_src

*** TypeScript and JavaScript

    Set up nvm so that we can manage Node versions

    #+begin_src emacs-lisp

			(use-package nvm
				:defer t)

    #+end_src

    Configure TypeScript and JavaScript language modes

    #+begin_src emacs-lisp

			(use-package typescript-mode
				:mode "\\.ts\\'"
				:config
				(setq typescript-indent-level 2))

			(defun pjp/set-js-indentation ()
				(setq js-indent-level 2)
				(setq-default tab-width 2))

			(use-package js2-mode
				:mode "\\.jsx?\\'"
				:config
				;; Use js2-mode for Node scripts
				(add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

				;; Don't use built-in syntax checking
				(setq js2-mode-show-strict-warnings nil)

				;; Set up proper indentation in JavaScript and JSON files
				(add-hook 'js2-mode-hook #'pjp/set-js-indentation)
				(add-hook 'json-mode-hook #'pjp/set-js-indentation))

			(use-package prettier-js
				:hook ((js2-mode . prettier-js-mode)
							 (typescript-mode . prettier-js-mode))
				:config
				(setq prettier-js-show-errors nil))

    #+end_src

*** C/C++

    #+begin_src emacs-lisp

			(use-package ccls
				:hook ((c-mode c++-mode objc-mode cuda-mode) .
							 (lambda () (require 'ccls) (lsp))))

    #+end_src

*** Emacs Lisp

    #+begin_src emacs-lisp

			(add-hook 'emacs-lisp-mode-hook #'flycheck-mode)

			(use-package paredit
				:ensure t
				:config
				(add-hook 'emacs-lisp-mode-hook #'paredit-mode)
				;; enable in the *scratch* buffer
				(add-hook 'lisp-interaction-mode-hook #'paredit-mode)
				(add-hook 'ielm-mode-hook #'paredit-mode)
				(add-hook 'lisp-mode-hook #'paredit-mode)
				(add-hook 'eval-expression-minibuffer-setup-hook #'paredit-mode))

			(use-package ielm
				:config
				(add-hook 'ielm-mode-hook #'eldoc-mode)
				(add-hook 'ielm-mode-hook #'rainbow-delimiters-mode))
    #+end_src

*** Markdown

    #+begin_src emacs-lisp

			(use-package markdown-mode
				:pin melpa-stable
				:mode "\\.md\\'"
				:config
				(setq markdown-command "marked")
				(defun pjp/set-markdown-header-font-sizes ()
					(dolist (face '((markdown-header-face-1 . 1.2)
													(markdown-header-face-2 . 1.1)
													(markdown-header-face-3 . 1.0)
													(markdown-header-face-4 . 1.0)
													(markdown-header-face-5 . 1.0)))
						(set-face-attribute (car face) nil :weight 'normal :height (cdr face))))

				(defun pjp/markdown-mode-hook ()
					(pjp/set-markdown-header-font-sizes))

				(add-hook 'markdown-mode-hook 'pjp/markdown-mode-hook))

    #+end_src

*** HTML

    #+begin_src emacs-lisp

			(use-package web-mode
				:mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'"
				:config
				(setq-default web-mode-code-indent-offset 2)
				(setq-default web-mode-markup-indent-offset 2)
				(setq-default web-mode-attribute-indent-offset 2))

			;; 1. Start the server with `httpd-start'
			;; 2. Use `impatient-mode' on any buffer
			(use-package impatient-mode
				:ensure t)

			(use-package skewer-mode
				:ensure t)

    #+end_src

*** YAML

    #+begin_src emacs-lisp

			(use-package yaml-mode
				:mode "\\.ya?ml\\'")

    #+end_src

*** Matlab

    #+begin_src emacs-lisp

			(use-package matlab
				:ensure matlab-mode
				:mode "\\.m\\'"
				:config
				(setq matlab-indent-function t)
				(setq matlab-shell-command "matlab"))

    #+end_src

** Productivity

*** Syntax checking with Flycheck

    #+begin_src emacs-lisp

			(use-package flycheck
				:defer t
				:hook (lsp-mode . flycheck-mode))

    #+end_src

*** Snippets

    #+begin_src emacs-lisp

			(use-package yasnippet
				:hook (prog-mode . yas-minor-mode)
				:config
				(yas-reload-all))

    #+end_src

*** Smart Parens

    #+begin_src emacs-lisp

			(use-package smartparens
				:hook (prog-mode . smartparens-mode))

    #+end_src

*** Rainbow Delimiters

    #+begin_src emacs-lisp

			(use-package rainbow-delimiters
				:hook (prog-mode . rainbow-delimiters-mode))

    #+end_src

*** Rainbow Mode

    Sets the background of HTML color strings in buffers to be the color mentioned.

    #+begin_src emacs-lisp

			(use-package rainbow-mode
				:defer t
				:hook (org-mode
							 emacs-lisp-mode
							 web-mode
							 typescript-mode
							 js2-mode))

    #+end_src


* Terminals

** term-mode

	 =term-mode= is a built-in terminal emulator in Emacs. Because it is written
	 in Emacs Lisp, you can start using it immediately with very little
	 configuration. If you are on Linux or macOS, =term-mode= is a great choice to
	 get started because it supports fairly complex terminal applications (=htop=,
	 =vim=, etc) and works pretty reliably. However, because it is written in
	 Emacs Lisp, it can be slower than other options like =vterm=. The speed will
	 only be an issue if you regularly run console apps with a lot of output.

	 Run a terminal with =M-x term!=

	 *Useful key bindings:*

	 - =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
	 - =C-c C-k= - Enter char-mode
	 - =C-c C-j= - Return to line-mode

	 #+begin_src emacs-lisp

		 (use-package term
			 :config
			 (setq explicit-shell-file-name "bash") ;; Change this to zsh, etc
			 ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args

			 ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
			 (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

	 #+end_src

*** Better term-mode colors

		The =eterm-256color= package enhances the output of =term-mode= to enable
		handling of a wider range of color codes so that many popular terminal
		applications look as you would expect them to. Keep in mind that this
		package requires =ncurses= to be installed on your machine so that it has
		access to the =tic= program. Most Linux distributions come with this program
		installed already so you may not have to do anything extra to use it.

		#+begin_src emacs-lisp

			(use-package eterm-256color
				:hook (term-mode . eterm-256color-mode))

		#+end_src

** vterm

	 [[https://github.com/akermu/emacs-libvterm/][vterm]] is an improved terminal emulator package which uses a compiled native
	 module to interact with the underlying terminal applications. This enables it
	 to be much faster than =term-mode= and to also provide a more complete
	 terminal emulation experience.

	 Make sure that you have the [[https://github.com/akermu/emacs-libvterm/#requirements][necessary dependencies]] installed before trying to
	 use =vterm= because there is a module that will need to be compiled before
	 you can use it successfully.

	 #+begin_src emacs-lisp

		 (use-package vterm
			 :commands vterm
			 :config
			 (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
			 ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
			 (setq vterm-max-scrollback 10000))

	 #+end_src

** shell-mode

	 [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Interactive-Shell.html#Interactive-Shell][shell-mode]] is a middle ground between =term-mode= and Eshell. It is *not* a
	 terminal emulator so more complex terminal programs will not run inside of
	 it. It does have much better integration with Emacs because all command input
	 in this mode is handled by Emacs and then sent to the underlying shell once
	 you press Enter.

	 *Useful key bindings:*

	 - =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
	 - =M-p= / =M-n= - go back and forward in the input history
	 - =C-c C-u= - delete the current input string backwards up to the cursor
	 - =counsel-shell-history= - A searchable history of commands typed into the shell

	 One advantage of =shell-mode= on Windows is that it's the only way to run
	 =cmd.exe=, PowerShell, Git Bash, etc from within Emacs. Here's an example of
	 how you would set up =shell-mode= to run PowerShell on Windows:

	 #+begin_src emacs-lisp

		 (when (eq system-type 'windows-nt)
			 (setq explicit-shell-file-name "powershell.exe")
			 (setq explicit-powershell.exe-args '()))

	 #+end_src

** Eshell

	 [[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html#Contributors-to-Eshell][Eshell]] is Emacs' own shell implementation written in Emacs Lisp. It provides
	 you with a cross-platform implementation (even on Windows!) of the common GNU
	 utilities you would find on Linux and macOS (=ls=, =rm=, =mv=, =grep=, etc).
	 It also allows you to call Emacs Lisp functions directly from the shell and
	 you can even set up aliases (like aliasing =vim= to =find-file=). Eshell is
	 also an Emacs Lisp REPL which allows you to evaluate full expressions at the
	 shell.

	 The downsides to Eshell are that it can be harder to configure than other
	 packages due to the particularity of where you need to set some options for
	 them to go into effect, the lack of shell completions (by default) for some
	 useful things like Git commands, and that REPL programs sometimes don't work
	 as well. However, many of these limitations can be dealt with by good
	 configuration and installing external packages, so don't let that discourage
	 you from trying it!


	 *Useful key bindings:*

	 - =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
	 - =M-p= / =M-n= - go back and forward in the input history
	 - =C-c C-u= - delete the current input string backwards up to the cursor
	 - =counsel-esh-history= - A searchable history of commands typed into Eshell

	 For more thoughts on Eshell, check out these articles by Pierre Neidhardt:
	 - https://ambrevar.xyz/emacs-eshell/index.html
	 - https://ambrevar.xyz/emacs-eshell-versus-shell/index.html

	 #+begin_src emacs-lisp

		 (defun pjp/configure-eshell ()
			 ;; Save command history when commands are entered
			 (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

			 ;; Truncate buffer for performance
			 (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

			 (setq eshell-history-size         10000
						 eshell-buffer-maximum-lines 10000
						 eshell-hist-ignoredups t
						 eshell-scroll-to-bottom-on-input t))

		 (use-package eshell-git-prompt)

		 (use-package eshell
			 :hook (eshell-first-time-mode . pjp/configure-eshell)
			 :config

			 (with-eval-after-load 'esh-opt
				 (setq eshell-destroy-buffer-when-process-dies t)
				 (setq eshell-visual-commands '("htop")))

			 (eshell-git-prompt-use-theme 'powerline))


	 #+end_src

