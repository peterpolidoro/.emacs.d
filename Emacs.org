#+title: Peter Polidoro Emacs Configuration
#+AUTHOR: Peter Polidoro
#+EMAIL: peterpolidoro@gmail.com
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Introduction
  
  This initialization file is inspired by David Wilson https://github.com/daviwil.

  #+begin_src emacs-lisp

    ;; NOTE: init.el is generated from Emacs.org.  Please edit that file
    ;;       in Emacs and init.el will be generated automatically!

  #+end_src

* Startup Performance

  Make startup faster by reducing the frequency of garbage collection and then
  use a hook to measure Emacs startup time.

  #+begin_src emacs-lisp

    ;; The default is 800 kilobytes.  Measured in bytes.
    (setq gc-cons-threshold (* 50 1000 1000))

    ;; Profile emacs startup
    (add-hook 'emacs-startup-hook
	      (lambda ()
		(message "*** Emacs loaded in %s with %d garbage collections."
			 (format "%.2f seconds"
				 (float-time
				  (time-subtract after-init-time before-init-time)))
			 gcs-done)))

  #+end_src

* Handle Warnings

  Package cl is deprecated, remove warning.

  #+begin_src emacs-lisp

    ;;(require 'loadhist)
    ;;(file-dependents (feature-file 'cl))
    (setq byte-compile-warnings '(cl-functions))

  #+end_src

* Keep .emacs.d Clean

  I don't want a bunch of transient files showing up as untracked in the Git
  repo so I move them all to another location.

  #+begin_src emacs-lisp

    ;; Keep transient cruft out of ~/.emacs.d/
    (setq user-emacs-directory "~/.cache/emacs/"
	  backup-directory-alist `(("." . ,(expand-file-name "backups" user-emacs-directory)))
	  url-history-file (expand-file-name "url/history" user-emacs-directory)
	  auto-save-list-file-prefix (expand-file-name "auto-save-list/.saves-" user-emacs-directory)
	  projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" user-emacs-directory))

    ;; Keep customization settings in a temporary file
    (setq custom-file
	  (if (boundp 'server-socket-dir)
	      (expand-file-name "custom.el" server-socket-dir)
	    (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
    (load custom-file t)

  #+end_src

* Package Management

  Set up ELPA, MELPA, and Org package repositories and load =use-package= to
  manage package configuration.

  #+begin_src emacs-lisp

    ;; Initialize package sources
    (require 'package)

    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			     ("melpa-stable" . "https://stable.melpa.org/packages/")
			     ("org" . "https://orgmode.org/elpa/")
			     ("elpa" . "https://elpa.gnu.org/packages/")))

    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
    (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    (eval-when-compile
      (require 'use-package))
    (require 'bind-key)                ;; if you use any :bind variant

    (require 'use-package-ensure)
    (setq use-package-always-ensure t)

  #+end_src

* Keyboard Bindings

** ESC Cancels All

   #+begin_src emacs-lisp

     (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

   #+end_src

** Keybinding Panel (which-key)

   [[https://github.com/justbur/emacs-which-key][which-key]] is great for getting an overview of what keybindings are available
   based on the prefix keys you entered.

   #+begin_src emacs-lisp

     (use-package which-key
       :init (which-key-mode)
       :diminish which-key-mode
       :config
       (setq which-key-idle-delay 0.3))

   #+end_src

** Simplify Leader Bindings (general.el)

   [[https://github.com/noctuid/general.el][general.el]] is a fantastic library for defining prefixed keybindings.

   #+begin_src emacs-lisp

     ;;(use-package general
     ;;  (general-create-definer pjp/leader-key-def
     ;;    :keymaps '(normal insert visual emacs)
     ;;    :global-prefix "C-."))

   #+end_src

* General Configuration

** User Interface

   Clean up Emacs' user interface, make it more minimal.

   #+begin_src emacs-lisp

     ;; Thanks, but no thanks
     (setq inhibit-startup-message t)

     (scroll-bar-mode -1)        ; Disable visible scrollbar
     (tool-bar-mode -1)          ; Disable the toolbar
     (tooltip-mode -1)           ; Disable tooltips
     (set-fringe-mode 10)        ; Give some breathing room

     (menu-bar-mode -1)            ; Disable the menu bar

     ;; Set up the visible bell
     (setq visible-bell t)

   #+end_src

   Improve scrolling.

   #+begin_src emacs-lisp

     (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
     (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
     (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
     (setq scroll-step 1)

   #+end_src

   Set frame transparency and maximize windows by default.

   #+begin_src emacs-lisp

     (set-frame-parameter (selected-frame) 'alpha '(95 . 95))
     (add-to-list 'default-frame-alist '(alpha . (95 . 95)))
     (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
     (add-to-list 'default-frame-alist '(fullscreen . maximized))

   #+end_src

   Enable line numbers and customize their format.

   #+begin_src emacs-lisp

     (column-number-mode)

     ;; Enable line numbers for some modes
     (dolist (mode '(text-mode-hook
		     prog-mode-hook
		     conf-mode-hook))
       (add-hook mode (lambda () (display-line-numbers-mode 1))))

     ;; Override some modes which derive from the above
     (dolist (mode '(org-mode-hook))
       (add-hook mode (lambda () (display-line-numbers-mode 0))))

   #+end_src

   Don't warn for large files (shows up when launching videos)

   #+begin_src emacs-lisp

     (setq large-file-warning-threshold nil)

   #+end_src

   Don't warn for following symlinked files

   #+begin_src emacs-lisp

     (setq vc-follow-symlinks t)

   #+end_src

   Don't warn when advice is added for functions

   #+begin_src emacs-lisp

     (setq ad-redefinition-action 'accept)

   #+end_src

   Kill whole line

   #+BEGIN_SRC emacs-lisp
     (setq kill-whole-line t)
   #+END_SRC

   Fill-column

   #+BEGIN_SRC emacs-lisp
     (setq-default fill-column 80)
   #+END_SRC

** Theme

   #+begin_src emacs-lisp

     (load-theme 'euphoria t t)
     (enable-theme 'euphoria)
     (setq color-theme-is-global t)
     (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

   #+end_src

** Font

*** Set the font

    I am using the [[https://github.com/tonsky/FiraCode][Fira Code]] and [[https://fonts.google.com/specimen/Cantarell][Cantarell]] fonts for this configuration which
    will more than likely need to be installed on your machine. Both can usually
    be found in the various Linux distro package managers or downloaded from the
    links above.

    #+begin_src emacs-lisp

      ;; You will most likely need to adjust this font size for your system!
      (defvar pjp/default-font-size 120)
      (defvar pjp/default-variable-font-size 120)

      (set-face-attribute 'default nil :font "Fira Code Retina" :height pjp/default-font-size)

      ;; Set the fixed pitch face
      (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height pjp/default-font-size)

      ;; Set the variable pitch face
      (set-face-attribute 'variable-pitch nil :font "Cantarell" :height pjp/default-variable-font-size :weight 'regular)

    #+end_src

*** Enable proper Unicode glyph support

    #+begin_src emacs-lisp

      (defun pjp/replace-unicode-font-mapping (block-name old-font new-font)
	(let* ((block-idx (cl-position-if
			   (lambda (i) (string-equal (car i) block-name))
			   unicode-fonts-block-font-mapping))
	       (block-fonts (cadr (nth block-idx unicode-fonts-block-font-mapping)))
	       (updated-block (cl-substitute new-font old-font block-fonts :test 'string-equal)))
	  (setf (cdr (nth block-idx unicode-fonts-block-font-mapping))
		`(,updated-block))))

      (use-package unicode-fonts
	:custom
	(unicode-fonts-skip-font-groups '(low-quality-glyphs))
	:config
	;; Fix the font mappings to use the right emoji font
	(mapcar
	 (lambda (block-name)
	   (pjp/replace-unicode-font-mapping block-name "Apple Color Emoji" "Noto Color Emoji"))
	 '("Dingbats"
	   "Emoticons"
	   "Miscellaneous Symbols and Pictographs"
	   "Transport and Map Symbols"))
	(unicode-fonts-setup))

    #+end_src

*** Emojis in buffers

    #+begin_src emacs-lisp

      (use-package emojify
	:hook (erc-mode . emojify-mode)
	:commands emojify-mode)

    #+end_src

** Mode Line

*** Basic Customization

    #+begin_src emacs-lisp

      (setq display-time-format "%l:%M %p %b %y"
	    display-time-default-load-average nil)

    #+end_src

*** Enable Mode Diminishing

    The [[https://github.com/myrjola/diminish.el][diminish]] package hides pesky minor modes from the modelines.

    #+begin_src emacs-lisp

      (use-package diminish)

    #+end_src

** Notifications

   [[https://github.com/jwiegley/alert][alert]] is a great library for showing notifications from other packages in a
   variety of ways. For now I just use it to surface desktop notifications from
   package code.

   #+begin_src emacs-lisp

     (use-package alert
       :commands alert
       :config
       (setq alert-default-style 'notifications))

   #+end_src

** Auto-Saving Changed Files

   #+begin_src emacs-lisp

     (use-package super-save
       :defer 1
       :diminish super-save-mode
       :config
       (super-save-mode +1)
       (setq super-save-auto-save-when-idle t))

   #+end_src

** Auto-Reverting Changed Files

   #+begin_src emacs-lisp

     (global-auto-revert-mode 1)

   #+end_src

** Highlight Matching Braces

   #+begin_src emacs-lisp

     (use-package paren
       :config
       (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
       (show-paren-mode 1))

   #+end_src

** Displaying World Time

   =display-time-world= command provides a nice display of the time at a
   specified list of timezones. Nice for working in a team with remote members.

   #+begin_src emacs-lisp

     (setq display-time-world-list
	   '(("America/Los_Angeles" "California")
	     ("America/New_York" "New York")
	     ("Europe/Athens" "Athens")
	     ("Pacific/Auckland" "Auckland")
	     ("Asia/Shanghai" "Shanghai")))
     (setq display-time-world-time-format "%a, %d %b %I:%M %p %Z")

   #+end_src

** TRAMP

   #+begin_src emacs-lisp

     ;; Set default connection mode to SSH
     (setq tramp-default-method "ssh")

   #+end_src

* Stateful Keymaps with Hydra

  #+begin_src emacs-lisp

    (use-package hydra
      :defer 1)

  #+end_src

* Better Completions with Ivy

  I currently use Ivy, Counsel, and Swiper to navigate around files, buffers,
  and projects super quickly.

  #+begin_src emacs-lisp

    (use-package ivy
      :diminish
      :bind (("C-s" . swiper))
      :init
      (ivy-mode 1)
      :config
      (setq ivy-use-virtual-buffers t)
      (setq ivy-wrap t)
      (setq ivy-count-format "(%d/%d) ")
      (setq enable-recursive-minibuffers t)

      ;; Use different regex strategies per completion command
      (push '(completion-at-point . ivy--regex-fuzzy) ivy-re-builders-alist) ;; This doesn't seem to work...
      (push '(swiper . ivy--regex-ignore-order) ivy-re-builders-alist)
      (push '(counsel-M-x . ivy--regex-ignore-order) ivy-re-builders-alist)

      ;; Set minibuffer height for different commands
      (setf (alist-get 'counsel-projectile-ag ivy-height-alist) 15)
      (setf (alist-get 'counsel-projectile-rg ivy-height-alist) 15)
      (setf (alist-get 'swiper ivy-height-alist) 15)
      (setf (alist-get 'counsel-switch-buffer ivy-height-alist) 7))

    (use-package ivy-hydra
      :defer t
      :after hydra)

    (use-package ivy-rich
      :init
      (ivy-rich-mode 1)
      :config
      (setq ivy-format-function #'ivy-format-function-line))

    (use-package counsel
      :bind (("M-x" . counsel-M-x)
	     ("C-x b" . counsel-ibuffer)
	     ("C-x C-f" . counsel-find-file)
	     ("C-M-l" . counsel-imenu)
	     :map minibuffer-local-map
	     ("C-r" . 'counsel-minibuffer-history))
      :custom
      (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
      :config
      (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^

    (use-package flx  ;; Improves sorting for fuzzy-matched results
      :defer t
      :init
      (setq ivy-flx-limit 10000))

    (use-package smex ;; Adds M-x recent command sorting for counsel-M-x
      :defer 1
      :after counsel)

    (use-package wgrep)

    (use-package ivy-posframe
      :custom
      (ivy-posframe-width      115)
      (ivy-posframe-min-width  115)
      (ivy-posframe-height     10)
      (ivy-posframe-min-height 10)
      :config
      (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
      (setq ivy-posframe-parameters '((parent-frame . nil)
				      (left-fringe . 8)
				      (right-fringe . 8)))
      (ivy-posframe-mode 1))

  #+end_src

* Jumping with Avy

  #+begin_src emacs-lisp

    (use-package avy
      :commands (avy-goto-char avy-goto-word-0 avy-goto-line))

    (use-package avy
      :bind (("C-:" . avy-goto-char)
	     ("C-;" . avy-goto-char-2)
	     ("M-g f" . avy-goto-line)
	     ("M-g w" . avy-goto-word-1)
	     ("M-g e" . avy-goto-word-0)))

  #+end_src

* Expand Region

  This module is absolutely necessary for working inside of Emacs Lisp files,
  especially when trying to some parent of an expression (like a =setq=).  Makes
  tweaking Org agenda views much less annoying.

  #+begin_src emacs-lisp

    (use-package expand-region
      :bind (("M-[" . er/expand-region)
	     ("C-(" . er/mark-outside-pairs)))

  #+end_src

* File Browsing

** Dired

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :defer 1
    :commands (dired dired-jump)
    :config
    (setq dired-listing-switches "-agho --group-directories-first"
	  dired-omit-files "^\\.[^.].*"
	  dired-omit-verbose nil)

    (autoload 'dired-omit-mode "dired-x")

    (add-hook 'dired-load-hook
      (lambda ()
      (interactive)
      (dired-collapse)))

    (add-hook 'dired-mode-hook
      (lambda ()
      (interactive)
      (dired-omit-mode 1)
      (hl-line-mode 1)))

    (use-package dired-rainbow
      :defer 2
      :config
      (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
      (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
      (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
      (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
      (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
      (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
      (dired-rainbow-define media "#de751f" ("mp3" "mp4" "mkv" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
      (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
      (dired-rainbow-define log "#c17d11" ("log"))
      (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
      (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
      (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
      (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
      (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
      (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
      (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
      (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
      (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
      (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
      (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*"))

    (use-package dired-single
      :ensure t
      :defer t)

    (use-package dired-ranger
      :defer t)

    (use-package dired-collapse
      :defer t))

  (defun pjp/dired-link (path)
    (lexical-let ((target path))
      (lambda () (interactive) (message "Path: %s" target) (dired target))))

#+end_src

** Opening Files Externally

#+begin_src emacs-lisp

  (use-package openwith
    :config
    (setq openwith-associations
      (list
        (list (openwith-make-extension-regexp
               '("mpg" "mpeg" "mp3" "mp4"
                 "avi" "wmv" "wav" "mov" "flv"
                 "ogm" "ogg" "mkv"))
               "mpv"
               '(file))
        (list (openwith-make-extension-regexp
               '("xbm" "pbm" "pgm" "ppm" "pnm"
                 "png" "gif" "bmp" "tif" "jpeg")) ;; Removed jpg because Telega was
                                                  ;; causing feh to be opened...
               "feh"
               '(file))
        (list (openwith-make-extension-regexp
               '("pdf"))
               "zathura"
               '(file))))
    (openwith-mode 1))

#+end_src

* Org Mode

  Set up Org Mode with a baseline configuration.  The following sections will add more things to it.

  #+begin_src emacs-lisp

    ;; Turn on indentation and auto-fill mode for Org files
    (defun pjp/org-mode-setup ()
      (variable-pitch-mode 1)
      (auto-fill-mode 0)
      (visual-line-mode 1))

    (use-package org
      :defer t
      :hook (org-mode . pjp/org-mode-setup)
      :config
      (setq org-src-fontify-natively t
	    org-src-tab-acts-natively t
	    org-edit-src-content-indentation 2
	    org-hide-block-startup nil
	    org-src-preserve-indentation nil
	    org-startup-folded 'content
	    org-cycle-separator-lines 2)

      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
	 (ledger . t)))

      ;; NOTE: Subsequent sections are still part of this use-package block!

  #+end_src

** Automatically "Tangle" on Save

   Handy tip from [[https://leanpub.com/lit-config/read#leanpub-auto-configuring-emacs-and--org-mode-for-literate-programming][this book]] on literate programming.

   #+begin_src emacs-lisp

     ;; Since we don't want to disable org-confirm-babel-evaluate all
     ;; of the time, do it around the after-save-hook
     (defun pjp/org-babel-tangle-dont-ask ()
       ;; Dynamic scoping to the rescue
       (let ((org-confirm-babel-evaluate nil))
	 (org-babel-tangle)))

     (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'pjp/org-babel-tangle-dont-ask
						   'run-at-end 'only-in-org-mode)))

   #+end_src

** Fonts and Bullets

   Set the header font sizes to something more palatable.  A fair amount of inspiration has been taken from [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][this blog post]].

   #+begin_src emacs-lisp

     (dolist (face '((org-level-1 . 1.2)
		     (org-level-2 . 1.1)
		     (org-level-3 . 1.05)
		     (org-level-4 . 1.0)
		     (org-level-5 . 1.1)
		     (org-level-6 . 1.1)
		     (org-level-7 . 1.1)
		     (org-level-8 . 1.1)))
       (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

     ;; Make sure org-indent face is available
     (require 'org-indent)

     ;; Ensure that anything that should be fixed-pitch in Org files appears that way
     (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
     (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
     (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
     (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
     (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
     (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
     (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

   #+end_src

** Block Templates

   These templates enable you to type things like =<el= and then hit =Tab= to expand
   the template.  More documentation can be found at the Org Mode [[https://orgmode.org/manual/Easy-templates.html][Easy Templates]]
   documentation page.

   #+begin_src emacs-lisp

     ;; This is needed as of Org 9.2
     (require 'org-tempo)

     (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
     (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
     (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
     (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
     (add-to-list 'org-structure-template-alist '("py" . "src python"))
     (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
     (add-to-list 'org-structure-template-alist '("json" . "src json"))

   #+end_src

** End =use-package org-mode=

   #+begin_src emacs-lisp

     ;; This ends the use-package org-mode block
     )

   #+end_src

* Development

  Configuration for various programming languages and dev tools that I use.

** Git

*** Magit

    https://magit.vc/manual/magit/

    #+begin_src emacs-lisp

      (use-package magit
	:commands (magit-status magit-get-current-branch)
	:custom
	(magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

      ;; Add a super-convenient global binding for magit-status since
      ;; I use it 8 million times a day
      (global-set-key (kbd "C-M-;") 'magit-status)

    #+end_src

*** Forge

    #+begin_src emacs-lisp

      (use-package forge
	:disabled)

    #+end_src

*** magit-todos

    This is an interesting extension to Magit that shows a TODOs section in your
    git status buffer containing all lines with TODO (or other similar words) in
    files contained within the repo.  More information at the [[https://github.com/alphapapa/magit-todos][GitHub repo]].

    #+begin_src emacs-lisp

      (use-package magit-todos
	:defer t)

    #+end_src

** Projectile

*** Initial Setup

    #+begin_src emacs-lisp

      (use-package projectile
	:diminish projectile-mode
	:config (projectile-mode)
	:bind-keymap
	("C-c p" . projectile-command-map)
	:init
	(when (file-directory-p "~/git")
	  (setq projectile-project-search-path '("~/git")))
	(setq projectile-switch-project-action #'projectile-dired))

      (use-package counsel-projectile
	:after projectile)

    #+end_src

*** Project Configurations

    This section contains project configurations for specific projects that I can't
    drop a =.dir-locals.el= file into.  Documentation on this approach can be found in
    the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Directory-Local-Variables.html][Emacs manual]].

    #+begin_src emacs-lisp

    #+end_src

** Languages

*** Language Server Support

    #+begin_src emacs-lisp

      (use-package ivy-xref
	:init (if (< emacs-major-version 27)
		  (setq xref-show-xrefs-function #'ivy-xref-show-xrefs)
		(setq xref-show-definitions-function #'ivy-xref-show-defs)))

      (use-package lsp-mode
	:commands lsp
	:hook ((typescript-mode js2-mode web-mode) . lsp)
	:bind (:map lsp-mode-map
		    ("TAB" . completion-at-point)))

      (use-package lsp-ui
	:hook (lsp-mode . lsp-ui-mode)
	:config
	(setq lsp-ui-sideline-enable t)
	(setq lsp-ui-sideline-show-hover nil)
	(setq lsp-ui-doc-position 'bottom)
	(lsp-ui-doc-show))

    #+end_src

*** Debug Adapter Support

    Not so convinced about this yet.

    #+begin_src emacs-lisp

      ;; (use-package dap-mode
      ;;   :ensure t
      ;;   :hook (lsp-mode . dap-mode)
      ;;   :config
      ;;   (dap-ui-mode 1)
      ;;   (dap-tooltip-mode 1)
      ;;   (require 'dap-node)
      ;;   (dap-node-setup)

      ;;   (dap-register-debug-template "Node: Attach"
      ;;     (list :type "node"
      ;;           :cwd nil
      ;;           :request "attach"
      ;;           :program nil
      ;;           :port 9229
      ;;           :name "Node::Run")))

    #+end_src

*** Meta Lisp

    Here are packages that are useful across different Lisp and Scheme implementations:

    #+begin_src emacs-lisp

      (use-package lispy
	:hook ((emacs-lisp-mode . lispy-mode)
	       (scheme-mode . lispy-mode)))

      (use-package lispyville
	:disabled
	:hook ((lispy-mode . lispyville-mode))
	:config
	(lispyville-set-key-theme '(operators c-w additional)))

    #+end_src

*** TypeScript and JavaScript

    Set up nvm so that we can manage Node versions

    #+begin_src emacs-lisp

      (use-package nvm
	:defer t)

    #+end_src

    Configure TypeScript and JavaScript language modes

    #+begin_src emacs-lisp

      (use-package typescript-mode
	:mode "\\.ts\\'"
	:config
	(setq typescript-indent-level 2))

      (defun pjp/set-js-indentation ()
	(setq js-indent-level 2)
	(setq-default tab-width 2))

      (use-package js2-mode
	:mode "\\.jsx?\\'"
	:config
	;; Use js2-mode for Node scripts
	(add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

	;; Don't use built-in syntax checking
	(setq js2-mode-show-strict-warnings nil)

	;; Set up proper indentation in JavaScript and JSON files
	(add-hook 'js2-mode-hook #'pjp/set-js-indentation)
	(add-hook 'json-mode-hook #'pjp/set-js-indentation))

      (use-package prettier-js
	:hook ((js2-mode . prettier-js-mode)
	       (typescript-mode . prettier-js-mode))
	:config
	(setq prettier-js-show-errors nil))

    #+end_src

*** C/C++

    #+begin_src emacs-lisp

      (use-package ccls
	:hook ((c-mode c++-mode objc-mode cuda-mode) .
	       (lambda () (require 'ccls) (lsp))))

    #+end_src

*** Emacs Lisp

    #+begin_src emacs-lisp

      (add-hook 'emacs-lisp-mode-hook #'flycheck-mode)

      (use-package helpful
	:ensure t
	:custom
	(counsel-describe-function-function #'helpful-callable)
	(counsel-describe-variable-function #'helpful-variable)
	:bind
	([remap describe-function] . counsel-describe-function)
	([remap describe-command] . helpful-command)
	([remap describe-variable] . counsel-describe-variable)
	([remap describe-key] . helpful-key))

    #+end_src

*** Markdown

    #+begin_src emacs-lisp

      (use-package markdown-mode
	:pin melpa-stable
	:mode "\\.md\\'"
	:config
	(setq markdown-command "marked")
	(defun pjp/set-markdown-header-font-sizes ()
	  (dolist (face '((markdown-header-face-1 . 1.2)
			  (markdown-header-face-2 . 1.1)
			  (markdown-header-face-3 . 1.0)
			  (markdown-header-face-4 . 1.0)
			  (markdown-header-face-5 . 1.0)))
	    (set-face-attribute (car face) nil :weight 'normal :height (cdr face))))

	(defun pjp/markdown-mode-hook ()
	  (pjp/set-markdown-header-font-sizes))

	(add-hook 'markdown-mode-hook 'pjp/markdown-mode-hook))

    #+end_src

*** HTML

    #+begin_src emacs-lisp

      (use-package web-mode
	:mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'"
	:config
	(setq-default web-mode-code-indent-offset 2)
	(setq-default web-mode-markup-indent-offset 2)
	(setq-default web-mode-attribute-indent-offset 2))

      ;; 1. Start the server with `httpd-start'
      ;; 2. Use `impatient-mode' on any buffer
      (use-package impatient-mode
	:ensure t)

      (use-package skewer-mode
	:ensure t)

    #+end_src

*** YAML

    #+begin_src emacs-lisp

      (use-package yaml-mode
	:mode "\\.ya?ml\\'")

    #+end_src

** Productivity

*** Syntax checking with Flycheck

    #+begin_src emacs-lisp

      (use-package flycheck
	:defer t
	:hook (lsp-mode . flycheck-mode))

    #+end_src

*** Snippets

    #+begin_src emacs-lisp

      (use-package yasnippet
	:hook (prog-mode . yas-minor-mode)
	:config
	(yas-reload-all))

    #+end_src

*** Smart Parens

    #+begin_src emacs-lisp

      (use-package smartparens
	:hook (prog-mode . smartparens-mode))

    #+end_src

*** Rainbow Delimiters

    #+begin_src emacs-lisp

      (use-package rainbow-delimiters
	:hook (prog-mode . rainbow-delimiters-mode))

    #+end_src

*** Rainbow Mode

    Sets the background of HTML color strings in buffers to be the color mentioned.

    #+begin_src emacs-lisp

      (use-package rainbow-mode
	:defer t
	:hook (org-mode
	       emacs-lisp-mode
	       web-mode
	       typescript-mode
	       js2-mode))

    #+end_src


